import{_ as n,c as a,a as e,o as t}from"./app-iMoEB5u2.js";const i={};function l(p,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="elastic-search学习笔记" tabindex="-1"><a class="header-anchor" href="#elastic-search学习笔记"><span>Elastic Search学习笔记</span></a></h1><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h3><p>Elasticsearch－基础介绍及索引原理分析 <a href="https://www.cnblogs.com/dreamroute/p/8484457.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/dreamroute/p/8484457.html</a><br> ElasticSearch官方文档<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/2.x/intro.html" target="_blank" rel="noopener noreferrer">https://www.elastic.co/guide/cn/elasticsearch/guide/2.x/intro.html</a></p><h2 id="什么是es" tabindex="-1"><a class="header-anchor" href="#什么是es"><span>什么是ES</span></a></h2><p>Elastic Search，一个分布式、可扩展的实时搜索和分析引擎； 一个文档型数据库，数据以JSON作为文档序列化的格式； 特点是检索数据的速度快，使用倒排索引而不是B+树索引（关系型数据库）；</p><p>ES中的概念</p><table><thead><tr><th>Elasticsearch</th><th>说明</th></tr></thead><tbody><tr><td>索引（Index）</td><td>等于RDBMS中<strong>数据库（Database）</strong> 的概念，实质是一个文档的集合。</td></tr><tr><td>类型（Type）</td><td>等于RDBMS中<strong>表（Table）</strong> 的概念，指在一个索引中，可以索引不同类型的文档，如用户数据、博客数据。从6.0.0 版本起已废弃，一个索引中只存放一类数据。</td></tr><tr><td>映射（Mapping）</td><td>等于RDBMS中<strong>表结构（Schema）</strong> 的概念</td></tr><tr><td>文档（Doc）</td><td>等于RDBMS中<strong>行（Row）</strong> 的概念 ，以JSON格式来表示</td></tr><tr><td>字段（Field）</td><td>等于RDBMS中<strong>列（Column）</strong> 的概念 ，以JSON格式来表示</td></tr></tbody></table><h2 id="为什么用es" tabindex="-1"><a class="header-anchor" href="#为什么用es"><span>为什么用ES</span></a></h2><p>如果你的系统需要快速的、支持大数据量的全文检索功能； 如果你的系统需要一个可扩展的分布式搜索引擎；</p><h2 id="es的应用场景" tabindex="-1"><a class="header-anchor" href="#es的应用场景"><span>ES的应用场景</span></a></h2><p>日志分析（ELK框架，还新增了一个FileBeat）</p><h2 id="es的特性" tabindex="-1"><a class="header-anchor" href="#es的特性"><span>ES的特性</span></a></h2><ul><li>支持分布式架构</li><li>高性能的搜索引擎</li><li>支持多种数据结构（文本、数值、日期、地理位置等）</li></ul><h2 id="es可视化管理工具" tabindex="-1"><a class="header-anchor" href="#es可视化管理工具"><span>ES可视化管理工具</span></a></h2><pre><code>**ElasticHD**
**Dejavu**
**Kibana**
</code></pre><h2 id="es索引" tabindex="-1"><a class="header-anchor" href="#es索引"><span>ES索引</span></a></h2><h4 id="创建es索引" tabindex="-1"><a class="header-anchor" href="#创建es索引"><span>创建ES索引</span></a></h4><p>创建ES索引的请求一般是这样的：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">PUT /my_index</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;mappings&quot;</span>:<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;dynamic&quot;</span><span class="token builtin class-name">:</span> true,</span>
<span class="line">    <span class="token string">&quot;properties&quot;</span>:<span class="token punctuation">{</span></span>
<span class="line">      <span class="token string">&quot;info&quot;</span>:<span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;text&quot;</span>,</span>
<span class="line">        <span class="token string">&quot;analyzer&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;ik_smart&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span>,</span>
<span class="line">      <span class="token string">&quot;email&quot;</span>:<span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;keyword&quot;</span>,</span>
<span class="line">        <span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token boolean">false</span></span>
<span class="line">      <span class="token punctuation">}</span>,</span>
<span class="line">      <span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;object&quot;</span>,</span>
<span class="line">        <span class="token string">&quot;properties&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token string">&quot;firstname&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;keyword&quot;</span></span>
<span class="line">          <span class="token punctuation">}</span>,</span>
<span class="line">          <span class="token string">&quot;lastname&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;keyword&quot;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>mappings</strong>:<strong>字段映射</strong>，配置索引里有哪些字段，以及每个字段的属性。</li><li><strong>dynamic</strong>:是否可以添加新字段（true(默认)/false/strict） <ul><li>true:当插入的文档有新字段，会自动创建新字段的映射</li><li>false:当插入的文档有新字段，依然会存储下来，但不能作为查询条件</li><li>strict:当插入的文档有新字段，抛出异常</li></ul></li><li><strong>type</strong>：字段的数据类型，一般有以下几种常用数据类型 <ul><li>字符串：text（可分词的文本）、keyword（精确值）</li><li>数值：long、integer、short、byte、double、float</li><li>布尔值：boolean</li><li>日期：date</li><li>对象：object</li></ul></li><li><strong>index</strong>:是否创建索引</li><li><strong>analyzer</strong>:分词器，text数据类型字段需要配置</li><li><strong>properties</strong>:配置该索引/字段的子字段</li></ul><p>创建索引后，还有对索引的查看，删除操作（不支持修改）。</p><h4 id="查看索引" tabindex="-1"><a class="header-anchor" href="#查看索引"><span>查看索引</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">GET /my_index</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="删除索引" tabindex="-1"><a class="header-anchor" href="#删除索引"><span>删除索引</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">DELETE /my_index</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="es的使用" tabindex="-1"><a class="header-anchor" href="#es的使用"><span>ES的使用</span></a></h2><h4 id="安装es服务器" tabindex="-1"><a class="header-anchor" href="#安装es服务器"><span>安装ES服务器</span></a></h4><p>略</p><h4 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token comment"># 以下是配置文件：</span></span>
<span class="line"><span class="token operator">/</span>config</span>
<span class="line">    <span class="token operator">/</span>elasticsearch<span class="token punctuation">.</span>yml</span>
<span class="line">    <span class="token operator">/</span>logging<span class="token punctuation">.</span>yml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token comment">#elasticsearch.yml</span></span>
<span class="line"><span class="token comment">#该文件是ES服务器的主要配置文件</span></span>
<span class="line"><span class="token comment">#分为静态属性和动态属性。</span></span>
<span class="line"><span class="token comment">#静态属性：ES启动后便不可修改，如cluster.name、node.name</span></span>
<span class="line"><span class="token comment">#动态属性：ES启动后，可通过Restful或其他方式修改</span></span>
<span class="line"><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> myescluster <span class="token comment"># 集群名字</span></span>
<span class="line"><span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 当前节点是否数据结点（默认为true）</span></span>
<span class="line"><span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 当前节点是否候选主结点（默认为true）</span></span>
<span class="line"><span class="token key atrule">node.ingest</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 当前节点是否吸收节点（默认为false）</span></span>
<span class="line"><span class="token key atrule">discovery.zen.minimum_master_nodes</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 当前集群</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="登录" tabindex="-1"><a class="header-anchor" href="#登录"><span>登录</span></a></h4><p>http://localhost:9200，若是远程服务器则修改一下IP地址</p><h3 id="es集群" tabindex="-1"><a class="header-anchor" href="#es集群"><span>ES集群</span></a></h3><p>ES集群通过结点组成。</p><p>ElasticSearch集群中，共有五种结点类型：</p><ul><li>主结点（Master）</li><li>候选主结点（Master-eligible）</li><li>数据结点（Data）</li><li>吸收结点（Ingest）</li><li>部落结点（Tribe）</li></ul><p><strong>主结点</strong> 每个集群只有一个主结点，负责：</p><ul><li>管理集群（管理其他结点）</li><li>集群级别的操作（如索引的创建或删除、跟踪其他结点的状态等）</li></ul><p><strong>候选主结点（相当于热备）</strong> 当集群中的主结点出现故障时，集群会从候选主结点中进行选举，一个候选主结点被选中后会成为新的主结点。 只有候选主结点有投票权，其他结点没有投票权。</p><p><strong>数据结点</strong><br> 略</p><h3 id="其他数据库与es交互" tabindex="-1"><a class="header-anchor" href="#其他数据库与es交互"><span>其他数据库与ES交互</span></a></h3><p><strong>ES从其他数据源同步数据</strong>： mysql、oracle（关系型数据库）： logstash-input-jdbc mongo： mongo-connector kafka、文件、日志：Logstash或Apache Flume</p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><h4 id="es存储原理-索引" tabindex="-1"><a class="header-anchor" href="#es存储原理-索引"><span>ES存储原理&amp;索引</span></a></h4><p><strong>docid</strong></p><p>ES数据库里的每条记录，都会分配到一个ID，称为doc id。</p><table><thead><tr><th>docid</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>Johnny Depp</td><td>25</td></tr><tr><td>2</td><td>Aby Homie</td><td>18</td></tr><tr><td>3</td><td>Johnny Wei</td><td>25</td></tr></tbody></table><p><strong>倒排索引（Posting）</strong></p><p>ES会为表中的每个字段都维护一个倒排索引。 倒排索引有两个主要字段，一个负责将表中该字段的每一行分成单词存储起来，一个则负责存储这些单词对应的docid（出现多次则以数组保存）。 查询时，通过分词去匹配索引，匹配到之后，根据后面的ID去查找记录。</p><p>name字段的倒排索引：</p><table><thead><tr><th>Term</th><th>Posting</th></tr></thead><tbody><tr><td>Johnny</td><td>[1,3]</td></tr><tr><td>Depp</td><td>1</td></tr><tr><td>Aby</td><td>2</td></tr><tr><td>Homie</td><td>2</td></tr><tr><td>Wei</td><td>3</td></tr></tbody></table><p>age字段的倒排索引：</p><table><thead><tr><th>Term</th><th>Posting</th></tr></thead><tbody><tr><td>25</td><td>[1,3]</td></tr><tr><td>18</td><td>2</td></tr></tbody></table><blockquote><p>倒排索引提供了模糊搜索的一种解决方案，但是当分词的数量很多（比如千万级），那么检索分词会很慢。 因此，ES又引出了分词词典这个概念。</p></blockquote><p><strong>分词词典（Term Dictionary）</strong></p><p>分词词典，是对分词进行排序后，使其可以通过二分查找达到log(n)级的查询效率。 对倒排索引（posting）排序后获得的就是Term Dictionary。</p><p>name字段的分词词典：</p><table><thead><tr><th>Term</th><th>Posting</th></tr></thead><tbody><tr><td>Aby</td><td>2</td></tr><tr><td>Depp</td><td>1</td></tr><tr><td>Homie</td><td>2</td></tr><tr><td>Johnny</td><td>[1,3]</td></tr><tr><td>Wei</td><td>3</td></tr></tbody></table><p>age字段的分词词典：</p><table><thead><tr><th>Term</th><th>Posting</th></tr></thead><tbody><tr><td>18</td><td>2</td></tr><tr><td>25</td><td>[1,3]</td></tr></tbody></table><blockquote><p>分词词典解决了查询效率问题，但是若数据量太大，则无法将全部数据都加载到内存。 为了解决这个问题，分词索引出现了。</p></blockquote><p><strong>分词索引（Term Index）</strong></p><p>通过分词中的前缀，为分词词典再维护一个B-树索引。 通过分词索引可快速定位到Term Dictionary里的某个offset，再沿着这个offset往下查询。</p><p>name字段的分词索引：</p><table><thead><tr><th>Index</th><th>Posting</th></tr></thead><tbody><tr><td>A</td><td>1</td></tr><tr><td>Ab</td><td>1</td></tr><tr><td>Aby</td><td>1</td></tr><tr><td>D</td><td>2</td></tr><tr><td>H</td><td>3</td></tr><tr><td>J</td><td>4</td></tr><tr><td>W</td><td>5</td></tr><tr><td>...</td><td></td></tr></tbody></table><blockquote><p>若分词索引数据量也很大，内存无法加载完，此时可以通过FST方法，压缩分词索引，提高存储效率。</p></blockquote><p><strong>FST</strong> 压缩算法，提高存储效率</p><h4 id="搜索原理-lucene" tabindex="-1"><a class="header-anchor" href="#搜索原理-lucene"><span>搜索原理（Lucene）</span></a></h4><p>略</p><h4 id="排序原理" tabindex="-1"><a class="header-anchor" href="#排序原理"><span>排序原理</span></a></h4><h4 id="配置分词" tabindex="-1"><a class="header-anchor" href="#配置分词"><span>配置分词</span></a></h4><p><strong>什么是分词器？</strong></p><p>ES将一段文本分成多个单词的工具。</p><p><strong>在哪个步骤会用到分词器？</strong></p><ol><li>保存数据时</li></ol><p>ES在将一条数据保存到表之后，为了生成倒排索引，还需要通过分词器，将这条数据的每一个字段，分成多个单词，保存到不同字段对应的倒排索引中。 生成倒排索引的原理，可见本文中的“倒排索引”介绍。</p><ol start="2"><li>查询数据时（全文检索）</li></ol><p>以下是一段全文检索请求（使用match），意思就是查表index1中，字段title匹配&quot;BROWN DOG!&quot;这个查询条件的数据：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">GET /index1/_search</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;query&quot;</span>:<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;match&quot;</span>:<span class="token punctuation">{</span></span>
<span class="line">      <span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;BROWN DOG!&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全文检索时，ES会先使用分词器，将查询条件分成多个词（[brown,dog]），只要字段中有其中一个词，便会命中。 比如会命中以下数据：</p><ul><li>title = i like brown,i don&#39;t like dog.</li><li>title = there is a brown tree.</li><li>title = a white dog.</li></ul><p>如果我们想查两个词都有的数据，可以像下面这样请求：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">GET /index1/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;query&quot;</span>:<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;match&quot;</span>:<span class="token punctuation">{</span></span>
<span class="line">      <span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;BROWN DOG!&quot;</span></span>
<span class="line">      <span class="token string">&quot;operator&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;and&quot;</span> //默认情况下是or</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>有哪些分词器？</strong></p><p>ES自带以下分词器：</p><ul><li>Standard：默认分词器，支持多语言，不分大小写。</li><li>Simple：非字母作为分隔符（即不会将数字分成一个单词）</li><li>Whitespace：空格、制表符、换行作为分隔符</li><li>Keyword：不分词</li><li>Pattern：正则表达式</li></ul><p>分词示例：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">//【1.】假设使用不同分词器对以下句子进行分词。</span>
<span class="line">“text”: “The 2 QUICK Brown-Foxes jumped over the lazy dog’s bone.”</span>
<span class="line"></span>
<span class="line">//默认的分词器下，以空格、标点符号作为分隔符，并将单词小写处理</span>
<span class="line">Standard：[&#39;the&#39;,&#39;2&#39;,&#39;quick&#39;,&#39;brown&#39;,&#39;foxes&#39;,&#39;jumped&#39;,&#39;over&#39;,&#39;the&#39;,&#39;lazy&#39;,&#39;dog&#39;s&#39;,&#39;bone&#39;]</span>
<span class="line"></span>
<span class="line">//Simple分词器下，除了空格、标点符号，数字也会作为分隔符，同样也会将单词小写处理</span>
<span class="line">Simple：[&#39;the&#39;,&#39;quick&#39;,&#39;brown&#39;,&#39;foxes&#39;,&#39;jumped&#39;,&#39;over&#39;,&#39;the&#39;,&#39;lazy&#39;,&#39;dog&#39;,&#39;s&#39;,&#39;bone&#39;]</span>
<span class="line"></span>
<span class="line">//Whitespace分词器下，以空格、制表符、换行作为分隔符，但不会将单词小写处理</span>
<span class="line">Whitespace：[&#39;The&#39;,&#39;2&#39;,&#39;QUICK&#39;,&#39;Brown-Foxes&#39;,&#39;jumped&#39;,&#39;over&#39;,&#39;the&#39;,&#39;lazy&#39;,&#39;dog&#39;s&#39;,&#39;bone&#39;]</span>
<span class="line"></span>
<span class="line">//【2.】对中文进行分词。</span>
<span class="line">“text”: “我想买3台空调”</span>
<span class="line"></span>
<span class="line">//若用上面的分词器，基本上都会分成[&#39;我&#39;,&#39;想&#39;,&#39;买&#39;,&#39;3&#39;,&#39;台&#39;,&#39;空&#39;,&#39;调&#39;]</span>
<span class="line">//此时，若搜索&#39;空调&#39;，是搜不出来这条数据的。因为从上面可以看出，没有分出&#39;空调&#39;这个分词</span>
<span class="line">//由此可见，自带的分词对中文搜索不是很友好。此时我们可以使用IK分词器。</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他分词器实现：</p><ul><li>IK：更高效的中文分词器</li></ul><p>IK分词器有两种模式：ik_max_word和ik_smart模式。</p><p>假设对“我是乒乓球冠军”进行分词。</p><p><strong>ik_max_word</strong>：最细粒度分词，会分成：[我，是，乒乓，乒乓球，球，冠军]</p><p><strong>ik_smart</strong>：最粗粒度分词，会分成：[我，是，乒乓球，冠军]</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">#测试分词（analyzer：standard、simple、whitespace、keyword、pattern...）</span>
<span class="line">curl -X POST &#39;localhost:9200/city/_analyze&#39;</span>
<span class="line"></span>
<span class="line">{</span>
<span class="line">  &quot;analyzer&quot;:&quot;standard&quot;,</span>
<span class="line">  &quot;text&quot;:&quot;你是&quot;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">#返回结果</span>
<span class="line">{</span>
<span class="line">  &quot;tokens&quot;:[</span>
<span class="line">  {</span>
<span class="line">   &quot;token&quot;:&quot;你&quot;,</span>
<span class="line">   &quot;start_offset&quot;:0,</span>
<span class="line">   &quot;end_offset&quot;:1,</span>
<span class="line">   &quot;type&quot;:&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>
<span class="line">   &quot;position&quot;:0</span>
<span class="line">  },</span>
<span class="line">  {</span>
<span class="line">   &quot;token&quot;:&quot;是&quot;,</span>
<span class="line">   &quot;start_offset&quot;:2,</span>
<span class="line">   &quot;end_offset&quot;:3,</span>
<span class="line">   &quot;type&quot;:&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>
<span class="line">   &quot;position&quot;:1</span>
<span class="line">  }</span>
<span class="line">  ]</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">#创建索引时，为某个字段指定分词（查询时会自动走分词）</span>
<span class="line">curl -X PUT &#39;localhost:9200/test&#39;</span>
<span class="line">{</span>
<span class="line">  &quot;mapping&quot;:{</span>
<span class="line">    &quot;properties&quot;:{</span>
<span class="line">      &quot;name&quot;:{   #创建一个name字段</span>
<span class="line">        &quot;type&quot;:&quot;text&quot;, #定义其类型为text</span>
<span class="line">        &quot;analyzer&quot;:&quot;ik_max_word&quot; #分词器使用ik_max_word</span>
<span class="line">      },</span>
<span class="line">      &quot;englishname&quot;:{   #创建一个englishname字段</span>
<span class="line">        &quot;type&quot;:&quot;text&quot;, #定义其类型为text</span>
<span class="line">        &quot;analyzer&quot;:&quot;standard&quot; #分词器使用standard</span>
<span class="line">      },</span>
<span class="line">      &quot;sex&quot;:{   #创建一个sex字段</span>
<span class="line">        &quot;type&quot;:&quot;keyword&quot;, #定义其类型为keyword，无需分词</span>
<span class="line">      },</span>
<span class="line">      &quot;age&quot;:{   #创建一个age字段</span>
<span class="line">        &quot;type&quot;:&quot;long&quot;, #定义其类型为long，无需分词</span>
<span class="line">      }</span>
<span class="line">    }</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,96)]))}const c=n(i,[["render",l]]),o=JSON.parse('{"path":"/database/elasticSearch/","title":"Elastic Search学习笔记","lang":"en-US","frontmatter":{"title":"Elastic Search学习笔记","sidebar":"heading"},"git":{"updatedTime":1750240340000,"contributors":[{"name":"azil","username":"azil","email":"854257920@qq.com","commits":2,"url":"https://github.com/azil"},{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":10,"url":"https://github.com/dongyz8"},{"name":"Fun_zil","username":"","email":"854257920@qq.com","commits":1}],"changelog":[{"hash":"ad8fc1a188d6829c38676e985c8e2097211af10d","time":1750240340000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"45b5590437faf102707a4627c085a1bcba76a5a3","time":1740293597000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"2107fe45a32694cb96e49385ca5e0106c7ec14a9","time":1732669486000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"66f87c080a540925a27ebc560e70bc48c9f871e7","time":1731464539000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"7c05407c589da4e360f9818399f05f3906658841","time":1731131933000,"email":"854257920@qq.com","author":"Fun_zil","message":"commit"},{"hash":"8f077c536b5e7f2af222b7b28b24c4d82f0bb36e","time":1730455849000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"a124420178706444697801263f1005096bad2c82","time":1728468221000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"0fb3892db22e769cf4ab23cd656d8e1ef96449b3","time":1697451120000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"f46692dcbe97a34ff346beb6ecee090ebfea7a4f","time":1696933702000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"c134bd6d46aca8a064a19bb65704fbff919268a4","time":1690885984000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"ba56277d160fbccaf0ee5c13019cdd9ebdcf438f","time":1689858036000,"email":"854257920@qq.com","author":"azil","message":"commit"},{"hash":"70b37d4f176375118b0ae99f54befb1f90908112","time":1689762909000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"30d5f2d518aad6bb98f35c66e1d957434a1a6467","time":1689514348000,"email":"854257920@qq.com","author":"azil","message":"commit"}]},"filePathRelative":"database/elasticSearch/README.md"}');export{c as comp,o as data};

import{_ as a,c as t,a as r,o as s}from"./app-Dz2xZzfz.js";const i={};function o(n,e){return s(),t("div",null,e[0]||(e[0]=[r(`<h1 id="prometheus学习笔记" tabindex="-1"><a class="header-anchor" href="#prometheus学习笔记"><span>Prometheus学习笔记</span></a></h1><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>中文文档：<a href="https://daichangya.github.io/prometheus.io/#/?id=readme" target="_blank" rel="noopener noreferrer">https://daichangya.github.io/prometheus.io/#/?id=readme</a></p><p>Prometheus架构及实践（主讲人：杨波）：<a href="https://www.bilibili.com/video/BV1pE411W7Pn/?spm_id_from=333.1007.top_right_bar_window_view_later.content.click" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1pE411W7Pn/?spm_id_from=333.1007.top_right_bar_window_view_later.content.click</a></p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>一个时间序列数据库。主要的应用场景为监控系统。</p><blockquote><p>常见的监控系统，一般通过以下的某种方式来监控某个系统的信息：</p><ul><li>Log（监控日志）</li><li>Tracing（监控调用函数链）</li><li>Metric（监控度量）</li><li>Healthcheck（健康检查） Prometheus属于Metric方式。</li></ul></blockquote><p>Prometheus从不同的主机、不同的应用程序（target）定期拉取一种结构化的字符串（叫Metric），并存储到自己的时间序列Database（TSDB）中，这就是Prometheus的基本原理。</p><h2 id="如何拉取监控数据" tabindex="-1"><a class="header-anchor" href="#如何拉取监控数据"><span>如何拉取监控数据？</span></a></h2><p>假设，你想监控自己电脑操作系统的情况（CPU、内存、硬盘使用情况等等）。</p><p>Prometheus提供了一个叫node-exporter的工具。</p><p>它相当于一个代理，负责收集你机器的信息，并将这些信息整理成一个一个metric。</p><p>在Prometheus Server上注册该exporter的信息后（prometheus.yml），Prometheus就会定期地通过node-exporter拉取你机器的信息。</p><p>同样，除了操作系统，其他的中间件（例如Mysql、Redis、Oracle、kafka、RabbitMQ）、硬件，官方都提供了exporter工具。</p><blockquote><p>那如果是要监控自己开发的应用程序呢？比如微服务？</p></blockquote><p>Prometheus也提供了一些API，供微服务暴露自己的Metric，若想实现统计用户登录次数、接口访问频率这些业务功能，可以用这种方式。这种方式也叫“埋点”。</p><h2 id="时间序列-metric" tabindex="-1"><a class="header-anchor" href="#时间序列-metric"><span>时间序列&amp;Metric</span></a></h2><p>“时间序列”是一种数据结构，若跟一般的关系型数据库类比：</p><p>时间序列的“表名”，由“指标名称”和“标签”组成。格式如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">#api_http_requests_total是指标名</span>
<span class="line">#method、handler是标签</span>
<span class="line"></span>
<span class="line">api_http_requests_total{method=&quot;POST&quot;, handler=&quot;/messages&quot;}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表有固定的两个字段：时间戳（timestamp）和样本值（value）。</p><p>存储格式如下：</p><p>||| |---|---|---| |指标名称|api_http_requests_total| |标签1|method=&quot;POST&quot;|| |标签2|handler=&quot;/messages&quot;|| ||| |1|2022-01-01 00:00:00|5| |2|2022-01-01 00:01:00|13| |3|2022-01-01 00:02:00|17| |...||</p><p><strong>时间序列表的创建：</strong></p><p><strong>时间序列表中数据的查询：</strong> 跟SQL一样，Prometheus提供了一种叫PromQL的语法，方便用户查询数据。</p><h2 id="样本值类型" tabindex="-1"><a class="header-anchor" href="#样本值类型"><span>样本值类型</span></a></h2><p>在Prometheus中，有四种样本值类型：</p><ul><li>Counter（计数器，数值自增）</li><li>Gauge（仪表盘，任意数值）</li><li>Histogram（直方图）</li><li>Summary（摘要）</li></ul>`,28)]))}const l=a(i,[["render",o]]),h=JSON.parse('{"path":"/devops/Prometheus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html","title":"Prometheus学习笔记","lang":"en-US","frontmatter":{},"git":{"updatedTime":1728468221000,"contributors":[{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":1,"url":"https://github.com/dongyz8"}],"changelog":[{"hash":"a124420178706444697801263f1005096bad2c82","time":1728468221000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"}]},"filePathRelative":"devops/Prometheus学习笔记.md"}');export{l as comp,h as data};

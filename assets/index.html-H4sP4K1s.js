import{_ as s,c as a,a as e,o as i}from"./app-Dz2xZzfz.js";const t={};function l(d,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>PYTHON</span></a></h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>pip</td><td>Python包管理工具，用于安装和管理Python第三方库。 python2.7.9+或python3.4+自带pip</td></tr><tr><td>uv</td><td>Python包管理工具</td></tr><tr><td>PyPI</td><td>Python Package Index的缩写，是Python官方的第三方软件库仓库。 仓库地址：<a href="https://pypi.org/" target="_blank" rel="noopener noreferrer">https://pypi.org/</a></td></tr><tr><td>PyCharm</td><td>JetBrains公司开发的Python集成开发环境(IDE)，提供代码补全、调试等功能</td></tr><tr><td>Django</td><td>高级Python Web框架，采用&quot;MTV&quot;模式，内置ORM、Admin等全栈功能</td></tr><tr><td>Flask</td><td>轻量级Python Web框架，核心简单但可扩展性强，适合小型项目和微服务</td></tr><tr><td>conda</td><td></td></tr><tr><td>venv</td><td>Python内置的模块，用于创建虚拟环境。创建的环境中包含：独立的python解析器、pip工具和包安装目录</td></tr></tbody></table><h2 id="开发环境搭建" tabindex="-1"><a class="header-anchor" href="#开发环境搭建"><span>开发环境搭建</span></a></h2><h3 id="【ide】pycharm" tabindex="-1"><a class="header-anchor" href="#【ide】pycharm"><span>【IDE】Pycharm</span></a></h3><blockquote><p>代码开发&amp;调试、版本控制</p></blockquote><p>需要先安装python。安装好后，在命令行中执行以下命令，返回python版本即安装成功。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">python --version</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="【环境管理器】miniconda-可选" tabindex="-1"><a class="header-anchor" href="#【环境管理器】miniconda-可选"><span>【环境管理器】miniconda（可选）</span></a></h3><blockquote><p>当你需要在<strong>多个Python环境</strong>下开发、安装<strong>多语言依赖包</strong>时，需要用到miniconda</p></blockquote><p>记得配置环境变量：</p><ul><li>\\miniconda3</li><li>\\miniconda3\\Library\\bin</li><li>\\miniconda3\\Scripts</li></ul><blockquote><p><strong>conda、miniconda、anaconda的区别</strong>:</p><ul><li>conda: 与pip类似，但它不仅能管理包，还能隔离和管理不同python版本的环境</li><li>miniconda: Anaconda 的轻量级版本，只包含了 Python 和 Conda，以及它们的依赖项</li><li>Anaconda: 一个非常流行的 Python 发行版，用于科学计算。它包含了 Vonda、Python 和超过 150 个科学软件包及其依赖项</li><li>jupyter: 如果你安装了anaconda，jupyter notebook会作为其中的一部分被自动安装。</li></ul></blockquote><h4 id="miniconda目录解析" tabindex="-1"><a class="header-anchor" href="#miniconda目录解析"><span>miniconda目录解析</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">\\miniconda3</span>
<span class="line">|</span>
<span class="line">|_Lib                        ----内部模块</span>
<span class="line">| |</span>
<span class="line">| |_ site-packages           ----第三方模块</span>
<span class="line">|</span>
<span class="line">|_Scripts                    ----可执行文件目录</span>
<span class="line">| |</span>
<span class="line">| |_pip.exe                  ----用于安装第三方模块的程序</span>
<span class="line">|</span>
<span class="line">|_python.exe                 ----python解释器</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用miniconda" tabindex="-1"><a class="header-anchor" href="#使用miniconda"><span>使用miniconda</span></a></h4><h5 id="虚拟环境操作" tabindex="-1"><a class="header-anchor" href="#虚拟环境操作"><span>虚拟环境操作</span></a></h5><ol><li>创建虚拟环境</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">conda create -n Test1 python=3.7</span>
<span class="line"># -n是-name的缩写</span>
<span class="line"># 环境默认创建到安装目录的envs下</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>查看已有虚拟环境</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">conda env list</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>进入虚拟环境</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">activate Test1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="4"><li>退出虚拟环境</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">deactivate</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="5"><li>删除虚拟环境</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">conda env remove -n Test1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="库操作" tabindex="-1"><a class="header-anchor" href="#库操作"><span>库操作</span></a></h5><ol><li>安装第三方库</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">conda install [库名]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>查看某个库的所有版本</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">conda search [库名]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>卸载某个库</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">conda remove [库名]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="4"><li>列出当前虚拟环境已安装的库</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">conda list</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>找不到库名可以到这里搜索：<a href="https://anaconda.org/" target="_blank" rel="noopener noreferrer">https://anaconda.org/</a></p></blockquote><h3 id="嵌入式python-运行环境" tabindex="-1"><a class="header-anchor" href="#嵌入式python-运行环境"><span>嵌入式python(运行环境)</span></a></h3><p>安装python 安装pip 查看pip已安装的模块 python -m pip list</p><h2 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构"><span>项目结构</span></a></h2><p>一个项目属于一个<strong>包</strong>，一个包是多个<strong>模块</strong>的集合。</p><p>包与模块的结构如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">api                          # 项目名</span>
<span class="line">├── src                      # 源代码主目录</span>
<span class="line">│  ├──module_A               # A模块</span>
<span class="line">│  │  ├──__init__.py         # 标记为python包</span>
<span class="line">│  │  ├──test1.py            # 子包里的test1模块</span>
<span class="line">│  │  └──test2.py </span>
<span class="line">│  └──module_B               # B模块</span>
<span class="line">│     ├──__init__.py         # 标记为python包</span>
<span class="line">│     └──test3.py            # 子包里的test1模块</span>
<span class="line">├── tests                    # 单元测试目录</span>
<span class="line">│   ├── test_module_a.py     # 模块A的测试用例</span>
<span class="line">│   └── test_module_b.py</span>
<span class="line">├── requirements.txt         # 依赖库列表（pip安装）</span>
<span class="line">├── pyproject.toml           # 项目元数据及构建配置（现代项目推荐）</span>
<span class="line">├── setup.py                 # 旧版项目打包配置（可选）</span>
<span class="line">├── .gitignore               # Git忽略规则</span>
<span class="line">└── README.md                # 项目说明文档</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="打包-部署" tabindex="-1"><a class="header-anchor" href="#打包-部署"><span>打包&amp;部署</span></a></h2><h3 id="【打包成python库】-setuptool" tabindex="-1"><a class="header-anchor" href="#【打包成python库】-setuptool"><span>【打包成python库】：setuptool</span></a></h3><ol><li>添加setup.py配置文件</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">from</span> setuptools <span class="token keyword">import</span> setup<span class="token punctuation">,</span> find_packages</span>
<span class="line"></span>
<span class="line">setup<span class="token punctuation">(</span></span>
<span class="line">    name<span class="token operator">=</span><span class="token string">&quot;project_name&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    version<span class="token operator">=</span><span class="token string">&quot;0.1.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    packages<span class="token operator">=</span>find_packages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    install_requires<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;requirements.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    entry_points<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;console_scripts&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;mycli=src.main:main&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>  <span class="token comment"># 命令行入口</span></span>
<span class="line"><span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>生成分发包</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># 生成源码包(.tar.gz)和Wheel包(.whl)</span></span>
<span class="line">python setup.py sdist bdist_wheel  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的包位于<code>/dist</code> 目录中。</p><h3 id="【打包成桌面应用】-pyinstaller" tabindex="-1"><a class="header-anchor" href="#【打包成桌面应用】-pyinstaller"><span>【打包成桌面应用】：PyInstaller</span></a></h3><p>略</p><h3 id="【打包成web服务】" tabindex="-1"><a class="header-anchor" href="#【打包成web服务】"><span>【打包成Web服务】</span></a></h3><p>假设部署到Ubuntu。</p><ol><li>安装基础Python环境</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">sudo apt update</span>
<span class="line">sudo apt install python3 python3-pip git nginx  # Web服务需Nginx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>上传源代码</li><li>用venv配置虚拟环境，然后安装依赖</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">python3 -m venv my_venv # 创建名为my_venv的虚拟环境</span>
<span class="line">source my_venv/bin/activate # 进入my_venv虚拟环境</span>
<span class="line">pip install -r requirements.txt #在my_venv环境中，安装项目依赖（仅影响当前虚拟环境）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>配置nginx服务器（略）</li><li>配置wsgi服务器（略）</li></ol>`,59)]))}const c=s(t,[["render",l]]),r=JSON.parse('{"path":"/python/","title":"概述","lang":"en-US","frontmatter":{"title":"概述"},"git":{"updatedTime":1750240340000,"contributors":[{"name":"azil","username":"azil","email":"854257920@qq.com","commits":2,"url":"https://github.com/azil"},{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":5,"url":"https://github.com/dongyz8"}],"changelog":[{"hash":"ad8fc1a188d6829c38676e985c8e2097211af10d","time":1750240340000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"45b5590437faf102707a4627c085a1bcba76a5a3","time":1740293597000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"f46692dcbe97a34ff346beb6ecee090ebfea7a4f","time":1696933702000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"c134bd6d46aca8a064a19bb65704fbff919268a4","time":1690885984000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"ba56277d160fbccaf0ee5c13019cdd9ebdcf438f","time":1689858036000,"email":"854257920@qq.com","author":"azil","message":"commit"},{"hash":"70b37d4f176375118b0ae99f54befb1f90908112","time":1689762909000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"30d5f2d518aad6bb98f35c66e1d957434a1a6467","time":1689514348000,"email":"854257920@qq.com","author":"azil","message":"commit"}]},"filePathRelative":"python/README.md"}');export{c as comp,r as data};

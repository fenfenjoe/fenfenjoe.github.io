import{_ as s,c as a,a as e,o as t}from"./app-iMoEB5u2.js";const p={};function i(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="springsecurity" tabindex="-1"><a class="header-anchor" href="#springsecurity"><span>SpringSecurity</span></a></h1><h2 id="spring-security实战" tabindex="-1"><a class="header-anchor" href="#spring-security实战"><span>Spring Security实战</span></a></h2><h3 id="_1-添加maven依赖" tabindex="-1"><a class="header-anchor" href="#_1-添加maven依赖"><span>1.添加Maven依赖</span></a></h3><ol><li>添加依赖</li></ol><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span> </span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>spring-boot-security-starter</strong> 主要作用：</p><ol><li>依赖了spring-security-config和spring-security-web两个包</li><li>启动时加载自动配置类：SecurityAutoConfiguration</li></ol></blockquote><ol start="2"><li><p>启动App，在浏览器访问localhost:8080，发现弹出登录界面（需要用户名密码）</p></li><li><p>初始账号为user，密码在控制台的日志中</p></li></ol><blockquote><p>这些都是Spring Security的默认配置，假如想输入用户密码后去数据库查用户信息，并返回权限，该怎么做呢？</p></blockquote><h3 id="_2-自定义登录逻辑" tabindex="-1"><a class="header-anchor" href="#_2-自定义登录逻辑"><span>2.自定义登录逻辑</span></a></h3><p>通过重写一个UserDetailService接口的实现类，可以自定义登录的逻辑。</p><p>UserDetailService接口中有一个UserDetail loadUserByUsername(String name)的方法。</p><p>将“去数据库查询用户信息”的逻辑重写至该方法，那么点击登录以后，便会走到loadUserByUsername的这段逻辑。（可打断点尝试）</p><blockquote><p>并不需要Controller，只要访问localhost:8080，便会自动走到这个UserDetailService接口的方法中。 现在，有了自己的自定义登录逻辑，想用自定义的登录页面，该怎么办？</p></blockquote><h3 id="_3-自定义登录页、登录url、成功页" tabindex="-1"><a class="header-anchor" href="#_3-自定义登录页、登录url、成功页"><span>3.自定义登录页、登录url、成功页</span></a></h3><p>新建以下的配置类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">&quot;/login.html&quot;</span><span class="token punctuation">)</span> <span class="token comment">//自定义登录界面</span></span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span> <span class="token comment">//HTML中表单登录按钮对应的url地址</span></span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">successForwardUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/successfulLogin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//登录成功后跳转的页面</span></span>
<span class="line"></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>想为用户添加一些权限控制，想控制一些接口（url）需要用户登录才能访问，该怎么办？</p></blockquote><h3 id="_4-访问控制-配置类" tabindex="-1"><a class="header-anchor" href="#_4-访问控制-配置类"><span>4.访问控制（配置类）</span></a></h3><p>访问控制有两种方式可以配置：1.配置类 2.注解</p><p><strong>配置类</strong></p><p>同样是上面的配置类中添加。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">&quot;/login.html&quot;</span><span class="token punctuation">)</span> <span class="token comment">//自定义登录界面</span></span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span> <span class="token comment">//HTML中表单登录按钮对应的url地址</span></span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">successForwardUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/successfulLogin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//登录成功后跳转的页面</span></span>
<span class="line"></span>
<span class="line">         <span class="token comment">//以下代码便是配置权限控制的地方。</span></span>
<span class="line">         </span>
<span class="line">         <span class="token comment">//配置页面的认证规则 </span></span>
<span class="line">         http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line">         <span class="token comment">// 跨域预检请求无需认证</span></span>
<span class="line">         <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">OPTIONS</span><span class="token punctuation">,</span> <span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line">         <span class="token comment">// 登录 无需认证</span></span>
<span class="line">         <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line">         <span class="token comment">// 注册 无需认证</span></span>
<span class="line">         <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/register&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token comment">//main1 有main1权限才能直接访问，否则走认证（登录）流程</span></span>
<span class="line">         <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/main1.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAuthority</span><span class="token punctuation">(</span><span class="token string">&quot;main1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token comment">//main1 有main1或者main2权限才能直接访问，否则走认证（登录）流程</span></span>
<span class="line">         <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/main1.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAnyAuthority</span><span class="token punctuation">(</span><span class="token string">&quot;main1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;main2&quot;</span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token comment">//main2 有admin角色才能直接访问，否则走认证（登录）流程</span></span>
<span class="line">         <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/main2.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token comment">//access表达式：结果同上，只是写法不一样</span></span>
<span class="line">         <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/main2.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;hasRole(&#39;admin&#39;)&quot;</span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token comment">//还可以通过access()调用自定义的权限判定方法</span></span>
<span class="line">         <span class="token comment">//里面是access表达式</span></span>
<span class="line">         <span class="token comment">//意思是：通过MyServiceImpl里面的hasPermission方法判定</span></span>
<span class="line">         <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/main2.html&quot;</span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;@myServiceImpl.hasPermission(request,authentication)&quot;</span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token comment">// swagger </span></span>
<span class="line">         <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/swagger**/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line">         <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/webjars/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/v2/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token comment">// 其他所有请求需要身份认证</span></span>
<span class="line">         <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问：在哪里配置用户的角色和权限？<br> 答：在上面提到的UserDetailService接口的实现类中。当查出UserDetail（用户信息）时，需要把它的<code>java List&lt;GrantedAuthority&gt;</code> （也就是权限列表）也查出来。<br> 以下为示例代码：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailService</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> grantedList <span class="token operator">=</span><span class="token class-name">AuthorityUtils</span><span class="token punctuation">.</span><span class="token function">commaSeparatedStringToAuthorityList</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token string">&quot;ROLE_admin&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ROLE_normal&quot;</span><span class="token punctuation">,</span> <span class="token comment">//角色，必须要“ROLE_”开头</span></span>
<span class="line">                <span class="token string">&quot;main1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;main2&quot;</span> <span class="token comment">//权限，没格式限制</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span></span>
<span class="line">                username<span class="token punctuation">,</span>  <span class="token comment">//用户名</span></span>
<span class="line">                password<span class="token punctuation">,</span>  <span class="token comment">//密码</span></span>
<span class="line">                grantedList <span class="token comment">//角色和权限</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="获取登录用户的信息" tabindex="-1"><a class="header-anchor" href="#获取登录用户的信息"><span>获取登录用户的信息</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">//登录后，authentication=登录当事人或令牌（token）；若未登录则返回null</span>
<span class="line">Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span>
<span class="line">//登录人信息，一般为SpringSecurity提供的UserDetail的实现类。里面保存登录人的信息</span>
<span class="line">Object obj = authentication.getPrincipal();</span>
<span class="line">String username;</span>
<span class="line">if(obj instanceof UserDetails){</span>
<span class="line">    username = ((UserDetails)obj).getUsername();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="访问控制匹配url的规则" tabindex="-1"><a class="header-anchor" href="#访问控制匹配url的规则"><span>访问控制匹配url的规则</span></a></h4><p>可以通过ant表达式来匹配url。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">?：匹配一个字符</span>
<span class="line">*：匹配0个或多个字符</span>
<span class="line">**：匹配0个或多个目录</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">http.authorizeRequests()</span>
<span class="line">  .anyMatcher(&quot;/image/**&quot;).permitAll //image下所有文件不用验证，可直接访问</span>
<span class="line">  .anyMatcher(&quot;/login&quot;).permitAll //login不用验证</span>
<span class="line">  .anyMatcher(&quot;/**/*.html&quot;).permitAll; //所有html页面不用验证</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过正则表达式来匹配url。</p><p>示例：略</p><p><strong>注解</strong></p><p>若需要使用注解配置接口的访问权限，需要现在配置类上加上以下注解：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">@EnableGlobalMethodSecurity(</span>
<span class="line">securedEnable=true, //想通过角色判断，设这个为true</span>
<span class="line">prePoseEnable=true//想通过角色或者权限判断，设这个为true</span>
<span class="line">)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.判断是否具有角色：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">//必须要加上&quot;ROLE_&quot;作为前缀，若无权限，则需要先登录；登录后还无权限则返回500</span>
<span class="line">@Secured(&quot;ROLE_admin&quot;)</span>
<span class="line">public void myMethod(){</span>
<span class="line">...</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.判断是否具有权限：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">//执行前判断是否有权限，若无权限，则需要先登录；登录后还无权限则返回500</span>
<span class="line">//里面是access表达式</span>
<span class="line">@PreAuthorize(&quot;hasRole(&#39;admin&#39;)&quot;)</span>
<span class="line">public void myMethod(){</span>
<span class="line">...</span>
<span class="line">}</span>
<span class="line">//执行后判断是否有权限，若无权限，则需要先登录；登录后还无权限则返回500</span>
<span class="line">//里面是access表达式</span>
<span class="line">@PoseAuthorize(&quot;hasRole(&#39;admin&#39;)&quot;)</span>
<span class="line">public void myMethod(){</span>
<span class="line">...</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>用户若没有权限访问接口，通常服务器会返回403的报错。这样直接返回报错不太友好，该怎么办？</p></blockquote><h3 id="_5-自定义403方案" tabindex="-1"><a class="header-anchor" href="#_5-自定义403方案"><span>5.自定义403方案</span></a></h3><p>同样在配置类中进行配置。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span> </span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//自定义一个403处理器</span></span>
<span class="line">      http<span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">MyDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span>    </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>每次都要登录太麻烦，如何设置一个类似于“自动登录”的功能？</p></blockquote><h3 id="_6-remember-me-功能" tabindex="-1"><a class="header-anchor" href="#_6-remember-me-功能"><span>6.REMEMBER ME 功能</span></a></h3><p>在登录界面添加一个单选框“记住我”，name为“remember-me”；</p><p>在配置类中添加remember me的配置。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token class-name">UserDetailService</span> userDetailService<span class="token punctuation">;</span></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">   <span class="token class-name">TokenRepository</span> tokenRepository<span class="token punctuation">;</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span> </span>
<span class="line">        <span class="token comment">//这两个类都要自行实现。</span></span>
<span class="line">        <span class="token comment">//userDetailService：获取用户信息的接口</span></span>
<span class="line">        <span class="token comment">//tokenRepository：保存登录信息的接口</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">userDetailService</span><span class="token punctuation">(</span>userDetailService<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">tokenRepository</span><span class="token punctuation">(</span>tokenRepository<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>登录后的事情解决了，那么登出的接口又该如何写？</p></blockquote><h3 id="_7-跨域配置-cors" tabindex="-1"><a class="header-anchor" href="#_7-跨域配置-cors"><span>7.跨域配置（CORS）</span></a></h3><p>1.全局配置：同样在配置类中进行配置。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">CorsFilter</span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 初始化cors配置对象</span></span>
<span class="line">        <span class="token class-name">CorsConfiguration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 设置允许跨域的域名,如果允许携带cookie的话,路径就不能写*号, *表示所有的域名都可以跨域访问</span></span>
<span class="line">        configuration<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:5500&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 设置跨域访问可以携带cookie</span></span>
<span class="line">        configuration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 允许所有的请求方法 ==&gt; GET POST PUT Delete</span></span>
<span class="line">        configuration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 允许携带任何头信息</span></span>
<span class="line">        configuration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 初始化cors配置源对象</span></span>
<span class="line">        <span class="token class-name">UrlBasedCorsConfigurationSource</span> configurationSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 给配置源对象设置过滤的参数</span></span>
<span class="line">        <span class="token comment">// 参数一: 过滤的路径 == &gt; 所有的路径都要求校验是否跨域</span></span>
<span class="line">        <span class="token comment">// 参数二: 配置类</span></span>
<span class="line">        configurationSource<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 返回配置好的过滤器</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>configurationSource<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span>    </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.局部允许跨域：@CrossOrigin</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">//方法1：在类上注解，则所有方法均允许跨域</span></span>
<span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test8&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>origins <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:5500&quot;</span><span class="token punctuation">)</span> </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test8Controller</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">//方法2</span></span>
<span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test8&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test8Controller</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//在方法上注解</span></span>
<span class="line">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>origins <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:5500&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-退出登录" tabindex="-1"><a class="header-anchor" href="#_8-退出登录"><span>8.退出登录</span></a></h3><p>Spring Security支持默认的登出功能，只要在浏览器调用/logout请求即可。 调用后会自动跳回到登录页面。</p><p>如果需要自定义登出功能，则需要修改配置类。原理跟自定义登录功能差不多。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//TML中表单登录按钮对应的url地址</span></span>
<span class="line"></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><p>上面提供了通过spring boot整合spring security的一些小demo，授权模式用的是security框架默认的用户名密码模式。当我们需要用到第三方认证时（如微信、QQ、微博等），则需要通过另一个框架：<code>Spring Security Oauth2</code></p><blockquote><p>如何将默认的授权模式（用户名密码模式），切换至Oauth2的授权码模式（第三方认证）？</p></blockquote><h3 id="spring-security-oauth2" tabindex="-1"><a class="header-anchor" href="#spring-security-oauth2"><span>Spring Security Oauth2</span></a></h3><p>授权码模式原理大致如下：</p><ul><li>用户点击按钮，确认授权用第三方账号登录我们的系统</li><li>此时第三方平台会返回给我们系统一个<strong>授权码</strong></li><li>此时，我们便可以拿着这个授权码去第三方平台获取<strong>令牌（token）</strong></li><li>获取到令牌后，便可以用令牌请求<strong>用户信息</strong></li></ul><p>第三方OAuth2平台一般会提供以下端点（接口）：</p><ul><li><code>Authorize EndPoint（/oauth2/authorize）</code>：授权端点，进行授权（返回授权码）</li><li><code>Token EndPoint（/oauth2/token）</code>：令牌端点，获取Token</li><li><code>Introspection EndPoint（/oauth2/introspect）</code>：校验端点，校验Token的合法性</li><li><code>Revokation EndPoint（/oauth2/revoke）</code>：撤销端点，撤销令牌</li><li><code>/oauth2/userinfo</code>：用户信息</li></ul><h4 id="spring-security原理" tabindex="-1"><a class="header-anchor" href="#spring-security原理"><span>Spring Security原理</span></a></h4><h5 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器"><span>过滤器</span></a></h5><p>Spring Security本质上是一个过滤器链。底层应用了Servlet的Filter过滤器链。</p><p>每次HTTP请求进来，都会先经过过滤器链对请求进行预处理。</p><p><strong>FAQ</strong></p><ul><li><p>请求进来时，每个过滤器方法都会调用吗？ 是的。</p></li><li><p>可以简单介绍一下Servlet的过滤器链的原理吗？</p><ol><li>过滤器的生命周期：tomcat将HTTP request封装成request ---&gt; 过滤器链 ----&gt; servlet生成response ---&gt; 过滤器链 ----&gt; tomcat返回HTTP response；</li><li>过滤器的执行顺序与web.xml中的<code>&lt;filter-mapping&gt;</code>标签相关（谁在前先执行谁）</li></ol></li></ul><p><strong>SecurityContextPersistenceFilter</strong>：获取SecurityContext</p><p><strong>BasicAuthenticationFilter</strong>：</p><p><strong>UsernamePasswordAuthenticationFilter</strong>：获取用户名和密码，封装后交由AuthenticationManager进行验证；</p><blockquote><p>【验证原理】 UsernamePasswordAuthenticationFilter -&gt; AuthenticationManager -&gt; AuthenticationProvider 实际上是通过一个管理器（Manager）去管理多种校验方式（Provider） 【AuthenticationManager原理】 维护了多种校验方式（AuthenticationProvider的List），只要有其中的一个AuthenticationProvider认证成功（即返回一个非空的Authentication），则代表认证成功，不会继续走其他的AuthenticationProvider； AuthenticationProvider默认实现类为DaoAuthencationProvider，即从数据库获取用户信息。 【DaoAuthenticationProvider认证过程】</p></blockquote><p><strong>ExceptionTranslationFilter</strong>：处理AuthenticationException 和 AccessDeniedException两类异常</p><p><strong>FilterSecurityInterceptor</strong>：校验是否有权限调用该方法（uri）</p><h6 id="过滤器如何加载" tabindex="-1"><a class="header-anchor" href="#过滤器如何加载"><span>过滤器如何加载</span></a></h6><p>FilterComparator可查看过滤器加载顺序。</p><p><strong>无Spring Boot加载</strong> DelegatingFilterProxy 加载 FilterChainProxy FilterChainProxy 加载 <code>List&lt;Filter&gt;</code> （过滤器链）</p><p><strong>Spring Boot自动加载</strong> @EnableWebSecurity</p><blockquote><p>加载了四个类： WebSecurityConfiguration SpringWebMvcImportSelector OAuth2ImportSelector AuthenticationConfiguration</p></blockquote>`,84)]))}const o=s(p,[["render",i]]),u=JSON.parse('{"path":"/java/spring/springSecurity.html","title":"spring security","lang":"en-US","frontmatter":{"title":"spring security","sidebar":"heading","sidebarDepth":2},"git":{"updatedTime":1750240340000,"contributors":[{"name":"azil","username":"azil","email":"854257920@qq.com","commits":2,"url":"https://github.com/azil"},{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":6,"url":"https://github.com/dongyz8"}],"changelog":[{"hash":"ad8fc1a188d6829c38676e985c8e2097211af10d","time":1750240340000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"a2c0aa288a5eeb363510fed6b624641ae5524f1d","time":1745920881000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"638a797868c62634bc2de3e7f0d72af56d987032","time":1700032666000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"c134bd6d46aca8a064a19bb65704fbff919268a4","time":1690885984000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"24e81caa2753cd74fa4fe675250bdd7ec4fcd34e","time":1690453830000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"c43e60dff2ab493e6f2e78d8c4981d618a398dab","time":1690036826000,"email":"854257920@qq.com","author":"azil","message":"commit"},{"hash":"70b37d4f176375118b0ae99f54befb1f90908112","time":1689762909000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"30d5f2d518aad6bb98f35c66e1d957434a1a6467","time":1689514348000,"email":"854257920@qq.com","author":"azil","message":"commit"}]},"filePathRelative":"java/spring/springSecurity.md"}');export{o as comp,u as data};

import{_ as a,c as n,a as e,o as p}from"./app-iMoEB5u2.js";const l={};function t(c,s){return p(),n("div",null,s[0]||(s[0]=[e(`<h1 id="类加载" tabindex="-1"><a class="header-anchor" href="#类加载"><span>类加载</span></a></h1><p>假设我们写下了以下类：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">TOP_TEACHER</span> <span class="token operator">=</span> <span class="token string">&quot;Sha&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> teacherName<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Student</span> student<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Teacher</span> teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们在IDEA运行代码时，JVM做了什么？</p><h2 id="编译" tabindex="-1"><a class="header-anchor" href="#编译"><span>编译</span></a></h2><p>使用javac编译工具，将我们写的.java源代码编译成字节码文件（.class）<br> 然后放到项目根目录/target/classes中。</p><h2 id="启动jvm" tabindex="-1"><a class="header-anchor" href="#启动jvm"><span>启动JVM</span></a></h2><p>启动后，我们在控制台中可以看到，IDEA会运行以下脚本来启动项目：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token string">&quot;C:\\Program Files (x86)\\Java\\jdk1.8.0_291<span class="token entity" title="\\b">\\b</span>in\\java.exe&quot;</span> </span>
<span class="line"><span class="token parameter variable">-agentlib:jdwp</span><span class="token operator">=</span>transport<span class="token operator">=</span>dt_socket,address<span class="token operator">=</span><span class="token number">127.0</span>.0.1:51483, <span class="token assign-left variable">suspend</span><span class="token operator">=</span>y,server<span class="token operator">=</span>n </span>
<span class="line">-javaagent:D:<span class="token punctuation">\\</span>idea2022<span class="token punctuation">\\</span>plugins<span class="token punctuation">\\</span>java<span class="token punctuation">\\</span>lib<span class="token punctuation">\\</span>rt<span class="token punctuation">\\</span>debugger-agent.jar </span>
<span class="line"><span class="token parameter variable">-Dfile.encoding</span><span class="token operator">=</span>UTF-8 </span>
<span class="line"><span class="token parameter variable">-classpath</span> <span class="token string">&quot;C:\\Program Files (x86)\\Java\\jdk1.8.0_291\\jre\\lib<span class="token entity" title="\\c">\\c</span>harsets.jar;C:\\Program Files (x86)\\Java\\jdk1.8.0_291\\jre\\lib\\deploy.jar;...&quot;</span> </span>
<span class="line">org.dyz.Teacher</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>C:\\Program Files (x86)\\Java\\jdk1.8.0_291\\bin\\java.exe --- JVM启动脚本<br> -agentlib 、 -javaagent 、-D 、-classpath --- java命令的入参<br> org.dyz.Teacher --- 标明该类为启动类</p></blockquote><h2 id="类加载-1" tabindex="-1"><a class="header-anchor" href="#类加载-1"><span>类加载</span></a></h2><p>类加载，目的就是将**某个类的字节码文件（.class）**加载进内存，从而JVM才能根据这些信息创建类的实例对象。</p><p>字节码文件，可能来自很多地方：</p><ul><li>JDK自带类库</li><li>项目代码编译后生成</li><li>项目依赖的JAR包</li><li>网络文件流</li></ul><blockquote><p>这么多类，JVM启动之后全都要放到内存吗？</p></blockquote><p>不需要。JVM会先加载启动类，发现启动类依赖类A，JVM就会加载类A；发现类A还依赖了类B，就会继续加载类B...如此类推。<br> 直到把所有用到了的类都加载到内存。</p><blockquote><p>JVM读到的是类的二进制字节码文件，怎么知道这个类需要加载哪些其他的类？</p></blockquote><p>我们可以先简单看看JVM的类加载过程，步骤分为：</p><ul><li>加载 --- 根据全类名，找到字节码文件，放进内存（方法区）</li><li>验证 --- 校验字节码文件的合法性，语法是否合规</li><li>准备 --- 为类的静态变量分配内存，并给予默认值</li><li>解析 --- 将类的符号引用转变为直接引用</li><li>初始化 --- 为类的静态变量赋予正确的值</li></ul><p>在“初始化”这一步骤，会为类的静态变量赋值，并执行静态代码。<br> 在示例代码中，发现我们需要为Subject创建实例对象，此时JVM才会把Subject的类加载进内存。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>同时，因为Student类没有被实例化，因此暂时不会被JVM加载进内存。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Student</span> student<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>触发类加载有以下几种情况：</p><ol><li>当创建类的实例：当通过关键字&quot;new&quot;创建一个类的实例时，JVM会加载该类的字节码文件并创建对象。</li><li>当访问类的静态变量或静态方法：当访问类的静态变量或静态方法时，JVM会加载该类的字节码文件。</li><li>当使用类的静态方法：当使用类的静态方法时，JVM会加载该类的字节码文件。</li><li>当使用类的静态常量：当使用类的静态常量时，JVM会加载该类的字节码文件。</li><li>当使用类的父类或接口：当一个类继承自另一个类或实现一个接口时，JVM会加载该父类或接口的字节码文件。</li><li>当使用反射机制：当使用Java的反射机制，如Class.forName()方法来动态加载类时，JVM会加载指定的类。</li><li>当启动应用程序时：当启动Java应用程序时，JVM会加载包含main()方法的类的字节码文件。</li></ol></blockquote>`,24)]))}const o=a(l,[["render",t]]),r=JSON.parse('{"path":"/java/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD.html","title":"类加载","lang":"en-US","frontmatter":{"0":"t","1":"i","2":"t","3":"l","4":"e","5":":","6":"类","7":"加","8":"载"},"git":{"updatedTime":1690885984000,"contributors":[{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":1,"url":"https://github.com/dongyz8"}],"changelog":[{"hash":"c134bd6d46aca8a064a19bb65704fbff919268a4","time":1690885984000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"}]},"filePathRelative":"java/jvm/类加载.md"}');export{o as comp,r as data};

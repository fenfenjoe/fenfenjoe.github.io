import{_ as e,c as n,a,o as i}from"./app-Dz2xZzfz.js";const l={};function d(c,s){return i(),n("div",null,s[0]||(s[0]=[a(`<h1 id="vuepress源码学习" tabindex="-1"><a class="header-anchor" href="#vuepress源码学习"><span>Vuepress源码学习</span></a></h1><h2 id="package-json" tabindex="-1"><a class="header-anchor" href="#package-json"><span>package.json</span></a></h2><h3 id="npm-run-docs-dev的原理" tabindex="-1"><a class="header-anchor" href="#npm-run-docs-dev的原理"><span><code>npm run docs:dev</code>的原理？</span></a></h3><p>npm是node.js的<strong>包管理器</strong>模块，你可以在nodejs的<code>/根目录/node_modules/</code>下见到这个模块。</p><p>npm提供了run命令，用于执行定义在<code>package.json</code>的npm脚本。</p><p>当用户执行<code>run</code>命令时，npm 会查找当前项目的<code>package.json</code>文件中的<code>scripts</code>字段，并执行对应的脚本命令<code>docs:dev</code>。</p><blockquote><p>npm的命令文档：<a href="https://docs.npmjs.com/cli/v10/commands/" target="_blank" rel="noopener noreferrer">https://docs.npmjs.com/cli/v10/commands/</a></p></blockquote><h3 id="vuepress-dev-docs的原理" tabindex="-1"><a class="header-anchor" href="#vuepress-dev-docs的原理"><span><code>vuepress dev docs</code>的原理？</span></a></h3><p>在执行了<code>npm run docs:dev</code>后，</p><p>实质等于执行了<code>npm run vuepress dev docs</code></p><p><code>vuepress</code>这个脚本在package.json中没定义，那这个命令是在哪定义、如何定义的呢？</p><p>点开<code>项目根目录/node_modules/vuepress/package.json</code>可以看到，在bin属性处有<code>&quot;vuepress&quot;: &quot;cli.js&quot;</code></p><p>这样在vuepress模块被全局安装到node.js时，会将<code>vuepress</code>命令也安装到系统路径中。</p><p>当执行了<code>vuepress</code>命令时，实质是执行了<code>cli.js</code>这个NPM脚本。</p><h2 id="cli-js" tabindex="-1"><a class="header-anchor" href="#cli-js"><span>cli.js</span></a></h2><h3 id="cli-js做了什么工作" tabindex="-1"><a class="header-anchor" href="#cli-js做了什么工作"><span>cli.js做了什么工作？</span></a></h3><ul><li><code>checkEnv(pkg)</code>检查nodejs环境</li><li><code>registerCoreCommands(cli, OPTIONS)</code>将@vuepress/core中的dev、build、eject方法注册到命令行中（最重要）</li></ul><h3 id="usr-bin-env-node-的作用是什么" tabindex="-1"><a class="header-anchor" href="#usr-bin-env-node-的作用是什么"><span><code>#!/usr/bin/env node</code> 的作用是什么？</span></a></h3><p>对于<code>#!/usr/bin/env node</code>，它告诉系统使用 env 程序来查找正确的解释器来执行脚本。 env 程序会搜索系统的 PATH 环境变量，以找到指定的解释器。</p><h3 id="update-notifier-模块有什么用" tabindex="-1"><a class="header-anchor" href="#update-notifier-模块有什么用"><span><code>update-notifier</code> 模块有什么用？</span></a></h3><p><code>update-notifier</code>是一个Node.js模块，用于检查包的可用更新并向用户显示通知，如果有更新可用的话。通过使用 update-notifier 模块，您可以轻松地在您的 Node.js 应用程序中实现更新通知功能。</p><h3 id="process为什么可以直接使用" tabindex="-1"><a class="header-anchor" href="#process为什么可以直接使用"><span><code>process</code>为什么可以直接使用？</span></a></h3><p>process是Node.js中的一个全局变量，通常用于访问当前 Node.js 进程的相关信息和控制进程。</p><p>常用方法：</p><ul><li>process.argv ：一个包含命令行参数的数组。</li><li>process.env ：一个包含环境变量的对象。</li><li>process.exit() ：退出当前进程。</li><li>process.cwd() ：返回当前工作目录的路径。</li><li>process.pid ：返回当前进程的 PID（进程 ID）。</li><li>process.on() ：用于监听各种进程事件，比如 exit 、 uncaughtException 等。</li></ul><p>其他Node.js常见的全局变量：</p><ul><li>global</li><li>require()</li><li>module</li><li>console</li><li>__dirname</li><li>__filename</li></ul><h2 id="vuepress-core-index-js" tabindex="-1"><a class="header-anchor" href="#vuepress-core-index-js"><span>@vuepress/core/index.js</span></a></h2><h3 id="解释下app-process-方法" tabindex="-1"><a class="header-anchor" href="#解释下app-process-方法"><span>解释下<code>app.process()</code>方法</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">async process () {</span>
<span class="line">    //1.负责网站配置及相对路径、主题模板、输出目录 &amp; 页面、插件API等 的处理及初始化</span>
<span class="line">    await this.resolveConfigAndInitialize()</span>
<span class="line">    this.normalizeHeadTagUrls() //基于用户提供的base配置做处理</span>
<span class="line">    this.themeAPI = loadTheme(this) //加载主题</span>
<span class="line">    this.resolveTemplates() //dev及ssr的模板配置</span>
<span class="line">    this.resolveGlobalLayout() //准备全局布局的配置</span>
<span class="line"></span>
<span class="line">    //2.引入插件</span>
<span class="line">    this.applyInternalPlugins() //将内部插件加入插件队列</span>
<span class="line">    this.applyUserPlugins() //将用户配置插件加入插件队列</span>
<span class="line">    this.pluginAPI.initialize() //按照插件队列顺序逐个执行applyPlugin</span>
<span class="line"></span>
<span class="line">    //3.markdown相关</span>
<span class="line">    this.markdown = createMarkdown(this) //按照配置创建markdown对象</span>
<span class="line"></span>
<span class="line">    //4.源文件搜集</span>
<span class="line">    await this.resolvePages() //找到源目录中所有文件，添加到pages数组中</span>
<span class="line"></span>
<span class="line">    //5.插件执行，生成临时文件</span>
<span class="line">    await this.pluginAPI.applyAsyncOption(&#39;additionalPages&#39;, this)</span>
<span class="line">    await Promise.all(</span>
<span class="line">      this.pluginAPI.getOption(&#39;additionalPages&#39;).appliedValues.map(async (options) =&gt; {</span>
<span class="line">        await this.addPage(options)</span>
<span class="line">      })</span>
<span class="line">    )</span>
<span class="line">    await this.pluginAPI.applyAsyncOption(&#39;ready&#39;)</span>
<span class="line">    await Promise.all([</span>
<span class="line">      this.pluginAPI.applyAsyncOption(&#39;clientDynamicModules&#39;, this),</span>
<span class="line">      this.pluginAPI.applyAsyncOption(&#39;enhanceAppFiles&#39;, this),</span>
<span class="line">      this.pluginAPI.applyAsyncOption(&#39;globalUIComponents&#39;, this)</span>
<span class="line">    ])</span>
<span class="line">  }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30)]))}const o=e(l,[["render",d]]),r=JSON.parse('{"path":"/azilnote/Vuepress%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0.html","title":"Vuepress源码学习","lang":"en-US","frontmatter":{"title":"Vuepress源码学习"},"git":{"updatedTime":1708506091000,"contributors":[{"name":"azil","username":"azil","email":"854257920@qq.com","commits":2,"url":"https://github.com/azil"},{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":4,"url":"https://github.com/dongyz8"}],"changelog":[{"hash":"922fc9f1b9845c9b88337898dd27cd7fcd80c70d","time":1708506091000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"099fd76e86cda10f30a12f609ee6b37c300e4565","time":1707040585000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"24e81caa2753cd74fa4fe675250bdd7ec4fcd34e","time":1690453830000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"c43e60dff2ab493e6f2e78d8c4981d618a398dab","time":1690036826000,"email":"854257920@qq.com","author":"azil","message":"commit"},{"hash":"70b37d4f176375118b0ae99f54befb1f90908112","time":1689762909000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"30d5f2d518aad6bb98f35c66e1d957434a1a6467","time":1689514348000,"email":"854257920@qq.com","author":"azil","message":"commit"}]},"filePathRelative":"azilnote/Vuepress源码学习.md"}');export{o as comp,r as data};

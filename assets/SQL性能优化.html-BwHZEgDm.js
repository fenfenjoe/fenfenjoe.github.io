import{_ as e,c as n,a,o as t}from"./app-Dz2xZzfz.js";const l={};function d(i,s){return t(),n("div",null,s[0]||(s[0]=[a(`<h1 id="sql性能优化" tabindex="-1"><a class="header-anchor" href="#sql性能优化"><span>SQL性能优化</span></a></h1><h2 id="_1-分析sql的执行计划" tabindex="-1"><a class="header-anchor" href="#_1-分析sql的执行计划"><span>1. 分析SQL的执行计划</span></a></h2><p>通过关键字<code>explain</code>，我们可以获取到某条sql的执行计划：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">explain</span>
<span class="line">select * from student where name like &#39;%haha%&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行计划示例：</p><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>PRIMARY</td><td>derived2</td><td>ALL</td><td></td><td></td><td>2934</td><td></td><td></td><td></td></tr><tr><td>1</td><td>PRIMARY</td><td>rll</td><td>eq_ref</td><td>PRIMARY</td><td></td><td>8</td><td>tmp.LINE_LOCATION_ID</td><td>1</td><td></td></tr><tr><td>1</td><td>PRIMARY</td><td>rl</td><td>eq_ref</td><td>PRIMARY</td><td></td><td>8</td><td>srm_price.rll.PO_LINE_ID</td><td>1</td><td></td></tr><tr><td>1</td><td>PRIMARY</td><td>rh</td><td>eq_ref</td><td>PRIMARY</td><td></td><td>8</td><td>srm_price.rl.PO_HEADER_ID</td><td>1</td><td>Using where</td></tr><tr><td>2</td><td>DERIVED</td><td>h</td><td>ref</td><td>PRIMARY, srm_po_headers_n1</td><td>srm_po_headers_n1</td><td>42</td><td>const</td><td>326</td><td>Using where; Using index; Using temporary; Using filesort</td></tr><tr><td>2</td><td>DERIVED</td><td>l</td><td>ref</td><td>PRIMARY, srm_po_lines_n1</td><td>srm_po_lines_n1</td><td>8</td><td>srm_price.h.PO_HEADER_ID</td><td>3</td><td>Using where; Using index</td></tr><tr><td>2</td><td>DERIVED</td><td>ll</td><td>ref</td><td>PRIMARY, srm_po_line_locations_102000_n3, srm_po_line_locations_102000_n6, srm_po_line_locations_102000_n7</td><td>srm_po_line_locations_102000_n3</td><td>8</td><td>srm_price.l.PO_LINE_ID</td><td>3</td><td>Using index condition; Using where</td></tr></tbody></table><p>下面我们看看执行计划有哪些内容：</p><h3 id="id" tabindex="-1"><a class="header-anchor" href="#id"><span>id</span></a></h3><p>id值越大，执行优先级越高；<br> id值相同，则从上往下执行；id为null最后执行。</p><h3 id="select-type" tabindex="-1"><a class="header-anchor" href="#select-type"><span>select_type</span></a></h3><p>select_type表示对应行是简单还是复杂的查询</p><ul><li>simple：简单查询。查询不包含子查询和union</li><li>primary：复杂查询中最外层的select</li><li>subquery：包含在 select 中的子查询(不在 from 子句中)</li><li>derived：包含在 from 子句中的子查询。MySQL会将结果存放在一个临时表中，也称为派生表(derived的英文含义)</li><li>union：在 union 中的第二个和随后的 select</li></ul><h3 id="table" tabindex="-1"><a class="header-anchor" href="#table"><span>table</span></a></h3><p>table表示正在访问哪个表</p><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>type</span></a></h3><p>这一列表示关联类型或访问类型，即MySQL决定如何查找表中的行，查找数据行记录的大概范围。</p><p>依次从最优到最差分别为：<code>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL </code></p><p>一般来说，得保证查询达到range级别，最好达到ref</p><ul><li>system: 表里只有一条数据时</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span> <span class="token comment">-- student表里只有一条数据</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>const: 查询条件 “主键=常量”</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> student_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>eq_ref: 查询条件是<strong>唯一索引</strong>，只对应一条记录</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">left</span> <span class="token keyword">join</span> teacher <span class="token keyword">on</span> student<span class="token punctuation">.</span>teacher_id <span class="token operator">=</span> teacher<span class="token punctuation">.</span>teacher_id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>index: 用到了覆盖索引，即需要查询的数据可以直接通过索引表获取，而不需要访问实际的数据行。</p></li><li><p>ref: 查询条件是 <strong>普通索引</strong>，可能对应多条记录</p></li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">left</span> <span class="token keyword">join</span> teacher <span class="token keyword">on</span> student<span class="token punctuation">.</span>teacher_name <span class="token operator">=</span> teacher<span class="token punctuation">.</span>teacher_name<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>range: 范围扫描。查询条件里含 in(),between,大于,小于,大于等于 等操作</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> student_id <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">-- 唯一索引，也会触发范围扫描</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> student_name <span class="token operator">&gt;</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- student_name有一个普通索引，此时也是range</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> age <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">-- age没索引，此时就不是range，而是ALL（全表扫描）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ALL: 全表扫描（完全没走索引，一条一条地查）</li></ul><h3 id="possible-keys" tabindex="-1"><a class="header-anchor" href="#possible-keys"><span>possible_keys</span></a></h3><p>列出查询可能使用的索引。</p><h3 id="key" tabindex="-1"><a class="header-anchor" href="#key"><span>key</span></a></h3><p>实际采用哪个索引。</p><h3 id="key-len" tabindex="-1"><a class="header-anchor" href="#key-len"><span>key_len</span></a></h3><p>表示mysql实际在索引里使用的字节数。</p><p>假如是单个索引：</p><ul><li>char(n) --- n个字节</li><li>varchar(n) --- 2个字节储存字符串长度，如果是utf-8，则3n+2个字节</li><li>tinyint --- 1个字节</li><li>smallint --- 2个字节</li><li>int --- 4个字节</li><li>bigint --- 8个字节</li><li>date --- 3个字节</li><li>timestamp --- 4个字节</li><li>datetime --- 8个字节</li></ul><p>假如是联合索引：</p><p>假设student表有一个联合索引：class_id + student_name</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token comment">-- 1</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> class_id <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"><span class="token comment">-- 2</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> class_id <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">and</span> student_name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上2条sql都使用了这个联合索引。<br> sql1，只用到了第1个列，class_id是bigint，所以key_len是8；<br> sql2，2个列都用上了，student_name是varchar(10)，所以key_len是8+30+2=40。</p><h3 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>ref</span></a></h3><p>表示在key列的索引中，表查找用到的列或常量。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> class_id <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">and</span> student_name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如上sql，ref = &#39;const,const&#39;</p><h3 id="rows" tabindex="-1"><a class="header-anchor" href="#rows"><span>rows</span></a></h3><p>表示估计要读取的行数。</p><h3 id="extra" tabindex="-1"><a class="header-anchor" href="#extra"><span>Extra</span></a></h3><p>额外信息。从额外信息中我们也可以看到sql哪里需要优化：</p><ul><li>Using index</li><li>Using where</li><li>Using index condition：索引条件下推（Index Condition Pushdown, ICP）</li><li>Using temporary: 使用了临时表（<strong>需要优化</strong>）</li><li>Using filesort: Server层需要做额外的排序操作（<strong>需要优化</strong>）</li><li>Select tables optimized away</li><li>Rowid-ordered scan</li></ul>`,50)]))}const p=e(l,[["render",d]]),o=JSON.parse('{"path":"/database/mysql/SQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","title":"SQL性能优化","lang":"en-US","frontmatter":{"0":"t","1":"i","2":"t","3":"l","4":"e","5":":","6":"S","7":"Q","8":"L","9":"性","10":"能","11":"优","12":"化"},"git":{"updatedTime":1749205204000,"contributors":[{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":4,"url":"https://github.com/dongyz8"},{"name":"Fun_zil","username":"","email":"854257920@qq.com","commits":1}],"changelog":[{"hash":"e6829e5801e5155e8c0b2e1787b283c97aab9e83","time":1749205204000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"c4850efc474770a7739428e0a883bf8bb9497131","time":1747994383000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"7c05407c589da4e360f9818399f05f3906658841","time":1731131933000,"email":"854257920@qq.com","author":"Fun_zil","message":"commit"},{"hash":"8019e38e3520a3c4e8e4636e119f81cf90a2c230","time":1718779069000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"994a314490231cf8d1426d196c755523a502cf35","time":1718359120000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"}]},"filePathRelative":"database/mysql/SQL性能优化.md"}');export{p as comp,o as data};

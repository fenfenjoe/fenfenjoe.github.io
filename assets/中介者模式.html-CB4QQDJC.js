import{_ as e,c as t,a as n,o as i}from"./app-Dz2xZzfz.js";const o={};function s(r,a){return i(),t("div",null,a[0]||(a[0]=[n('<h1 id="中介者模式" tabindex="-1"><a class="header-anchor" href="#中介者模式"><span>中介者模式</span></a></h1><h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h2><p>中介者模式（Mediator Pattern）是一种<strong>行为型设计模式</strong>，它通过定义一个中介对象来封装一组对象之间的交互关系，从而降低对象之间的直接耦合度。<br> 该模式的核心思想是&quot;不要互相交谈，而是通过中介者沟通&quot;。</p><p>核心组件：</p><ul><li>中介者接口(Mediator)：定义各组件间通信的接口</li><li>具体中介者(ConcreteMediator)：实现中介者接口，协调各组件交互</li><li>组件(Colleague)：包含指向中介者的引用，通过中介者与其他组件通信</li></ul><h2 id="实际应用场景" tabindex="-1"><a class="header-anchor" href="#实际应用场景"><span>实际应用场景</span></a></h2><ul><li>Java Message Service (JMS)：消息中间件作为中介者</li><li>Spring框架：ApplicationContext作为中介者管理Bean</li></ul><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq"><span>FAQ</span></a></h2>',8)]))}const c=e(o,[["render",s]]),l=JSON.parse('{"path":"/designPattern/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html","title":"中介者模式","lang":"en-US","frontmatter":{"title":"中介者模式","sidebarDepth":0},"git":{"updatedTime":1749806079000,"contributors":[{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":3,"url":"https://github.com/dongyz8"}],"changelog":[{"hash":"80e0827d475a79fb45454cb067b28fc2e737faa6","time":1749806079000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"c99267f1ba6ef14faa33acf1026d38fe3d5de16f","time":1697004430000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"c134bd6d46aca8a064a19bb65704fbff919268a4","time":1690885984000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"}]},"filePathRelative":"designPattern/中介者模式.md"}');export{c as comp,l as data};

import{_ as s,c as a,a as p,o as e}from"./app-Dz2xZzfz.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="菜鸟教程-python3" tabindex="-1"><a class="header-anchor" href="#菜鸟教程-python3"><span>菜鸟教程-python3</span></a></h1><h2 id="推导式" tabindex="-1"><a class="header-anchor" href="#推导式"><span>推导式</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token comment">#%% 推导式（类似于Java8 的Stream API，可对集合进行转换、排序、过滤等处理）</span></span>
<span class="line"></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">列表（List）推导式（返回一个新的List）</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line">names <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;Amy&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">#推导式1：将List所有元素变成大写</span></span>
<span class="line">new_names <span class="token operator">=</span> <span class="token punctuation">[</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">]</span> </span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>new_names<span class="token punctuation">)</span> <span class="token comment">#[&#39;AMY&#39;,&#39;BOB&#39;,&#39;ALICE&#39;]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#推导式2：将List所有元素变成大写，并过滤出长度大于3的元素</span></span>
<span class="line">new_names <span class="token operator">=</span> <span class="token punctuation">[</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> name <span class="token keyword">in</span> names <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>new_names<span class="token punctuation">)</span> <span class="token comment">#[&#39;ALICE&#39;]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">字典（Map）推导式（返回一个新的Map）</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line">names <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;Amy&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">#推导式1：以List中的值为key，值的长度为value，构造一个新的Map</span></span>
<span class="line">new_names <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>new_names<span class="token punctuation">)</span> <span class="token comment">#{&#39;Amy&#39;:3,&#39;Bob&#39;:3,&#39;Alice&#39;:5}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#推导式1：以List中的值为key，值的长度为value，构造一个新的Map</span></span>
<span class="line">new_names <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">for</span> name <span class="token keyword">in</span> names <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">3</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>new_names<span class="token punctuation">)</span> <span class="token comment">#{&#39;Alice&#39;:5}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">集合（Set）推导式（返回一个新的Set）</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line">names <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;Amy&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">#推导式1</span></span>
<span class="line">new_names <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>new_names<span class="token punctuation">)</span> <span class="token comment">#{&#39;Amy&#39;,&#39;Bob&#39;,&#39;Alice&#39;}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">元组（只读列表，Tuple）推导式（返回一个新的Tuple）</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line">names <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;Amy&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">#推导式1</span></span>
<span class="line">new_names <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>new_names<span class="token punctuation">)</span> <span class="token comment">#(&#39;Amy&#39;,&#39;Bob&#39;,&#39;Alice&#39;)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="格式化字符串" tabindex="-1"><a class="header-anchor" href="#格式化字符串"><span>格式化字符串</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token comment">#%% 字符串</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#格式化字符串</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我叫 %s，今年 %s 岁&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#输出“我叫小明，今年10岁</span></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">%s 格式化字符串</span>
<span class="line">%d 格式化整数</span>
<span class="line">%f 格式化浮点数（可指定小数点后精度，如%2f、%3f）</span>
<span class="line">...</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我叫{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我叫{name}，今年{age}岁&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我叫{0}，今年{1}岁&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;圆周率={0:.3f}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#浮点数取3位小数</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{name:10} ===&gt; {age:10}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#后面的:10保证至少有10的宽度</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">#多行字符串（三个双引号）</span></span>
<span class="line"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;这是一个多行字符串实例</span>
<span class="line">哈哈哈</span>
<span class="line">怎么样</span>
<span class="line">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#f-string（新的格式化字符串）</span></span>
<span class="line">my_name <span class="token operator">=</span> <span class="token string">&#39;john&#39;</span></span>
<span class="line">my_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;parent&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;Smith&#39;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;my name is </span><span class="token interpolation"><span class="token punctuation">{</span>my_name<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;I am </span><span class="token interpolation"><span class="token punctuation">{</span>my_map<span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> years old.My parent is </span><span class="token interpolation"><span class="token punctuation">{</span>my_map<span class="token punctuation">[</span><span class="token string">&quot;parent&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&gt;</span> https<span class="token punctuation">:</span><span class="token operator">//</span>docs<span class="token punctuation">.</span>python<span class="token punctuation">.</span>org<span class="token operator">/</span>zh<span class="token operator">-</span>cn<span class="token operator">/</span><span class="token number">3.12</span><span class="token operator">/</span>tutorial<span class="token operator">/</span>inputoutput<span class="token punctuation">.</span>html</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串常用函数" tabindex="-1"><a class="header-anchor" href="#字符串常用函数"><span>字符串常用函数</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">#字符串常用函数</span>
<span class="line">len(x) #返回字符串x的长度</span>
<span class="line">x.find(y) #检查子字符串y是否在x中，若存在则返回索引值，不存在返回-1</span>
<span class="line">isalpha(x) #检查是否都是字母或中文，是则返回true</span>
<span class="line">isdigit(x)、isnumeric(x) #检查是否都是数字，是则返回true</span>
<span class="line">&#39;abc&#39;.format() # 格式化输出（重要）</span>
<span class="line">&#39;abc&#39;.rjust() # 在左侧填充空格，对给定宽度字段中的字符串进行右对齐</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数定义" tabindex="-1"><a class="header-anchor" href="#函数定义"><span>函数定义</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token comment">#%% 函数</span></span>
<span class="line"><span class="token comment">#定义函数（无返回值）</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">:</span> </span>
<span class="line">	<span class="token keyword">print</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line"><span class="token comment">#定义函数（有返回值）</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">:</span> </span>
<span class="line">	<span class="token keyword">print</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> arg1</span>
<span class="line">test2<span class="token punctuation">(</span>arg1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#通过关键字指定入参，打印1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#定义函数（入参有默认值）</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">test3</span><span class="token punctuation">(</span>arg1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> </span>
<span class="line">	<span class="token keyword">print</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span></span>
<span class="line">test3<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 0</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#定义函数（arg2为不定长参数，实质是传入一个元组）</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">test4</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span><span class="token operator">*</span>arg2<span class="token punctuation">)</span><span class="token punctuation">:</span> </span>
<span class="line">	<span class="token keyword">print</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span></span>
<span class="line">test4<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token comment">#arg1=10,arg2=(20,30,40)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">#定义函数（arg2为不定长参数，实质是传入一个字典）</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">test5</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span><span class="token operator">**</span>arg2<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span></span>
<span class="line">test5<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">#10 {&#39;a&#39;:20,&#39;b&#39;:30}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#定义函数（通过lambda表达式定义匿名函数）</span></span>
<span class="line">x <span class="token operator">=</span> <span class="token keyword">lambda</span> a <span class="token punctuation">:</span> a<span class="token operator">+</span><span class="token number">10</span> <span class="token comment">#其中，a为入参，a+10为函数体</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#15</span></span>
<span class="line"></span>
<span class="line">x <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b <span class="token punctuation">:</span> a<span class="token operator">+</span>b <span class="token comment">#其中，a,b为入参，a+b为函数体</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)]))}const o=s(t,[["render",l]]),u=JSON.parse('{"path":"/python/python3(%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B).html","title":"菜鸟教程-python3","lang":"en-US","frontmatter":{"title":"菜鸟教程-python3","sidebar":"heading","sidebarDepth":1},"git":{"updatedTime":1750240340000,"contributors":[{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":2,"url":"https://github.com/dongyz8"}],"changelog":[{"hash":"ad8fc1a188d6829c38676e985c8e2097211af10d","time":1750240340000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"45b5590437faf102707a4627c085a1bcba76a5a3","time":1740293597000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"}]},"filePathRelative":"python/python3(菜鸟教程).md"}');export{o as comp,u as data};

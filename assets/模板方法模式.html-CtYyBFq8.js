import{_ as s,c as a,a as e,o as p}from"./app-iMoEB5u2.js";const t={};function c(o,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="模板方法模式" tabindex="-1"><a class="header-anchor" href="#模板方法模式"><span>模板方法模式</span></a></h1><h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h2><p><strong>场景：</strong><br> 某个函数有一个固定的流程，流程按一定的步骤进行；但这些步骤的具体实现不确定，或者说可以被修改。</p><p>例如“银行办理业务”，分为“取号”、“排队”、“办理业务”、“评价服务”几个步骤。其中“取号”可以“现场取”、“手机取”；“办理业务”可以是“取款”、“存款”等等。</p><p><strong>做法：</strong><br> 同样拿银行办理业务作例子。 定义一个抽象类，其中runBusiness定义了办理业务的固定流程，其余四个方法由子类去实现。</p><h2 id="代码实现示例" tabindex="-1"><a class="header-anchor" href="#代码实现示例"><span>代码实现示例</span></a></h2><p>定义一个抽象类，其中runBusiness定义了办理业务的固定流程，其余四个方法由子类去实现。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BussinessTemplate</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token doc-comment comment">/**办理业务的抽象流程**/</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runBusiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">inQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">doBusiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">judgeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token doc-comment comment">/**下面的步骤因为不固定，因此定义为抽象方法。</span>
<span class="line">  若步骤是明确且固定不变的，则可直接在此实现，不用定义为抽象方法。**/</span></span>
<span class="line">  <span class="token doc-comment comment">/**取号**/</span></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token doc-comment comment">/**排队**/</span></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">inQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token doc-comment comment">/**办理业务**/</span></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doBusiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token doc-comment comment">/**评价服务**/</span></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">judgeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若要写一个“存款”的流程，则只需继承上面这个BussinessTemplate抽象类，并实现里面的抽象方法即可。</p><h2 id="实际应用场景" tabindex="-1"><a class="header-anchor" href="#实际应用场景"><span>实际应用场景</span></a></h2><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq"><span>FAQ</span></a></h2>`,11)]))}const l=s(t,[["render",c]]),u=JSON.parse('{"path":"/designPattern/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html","title":"模板方法模式","lang":"en-US","frontmatter":{"title":"模板方法模式","sidebarDepth":0},"git":{"updatedTime":1697004430000,"contributors":[{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":2,"url":"https://github.com/dongyz8"}],"changelog":[{"hash":"c99267f1ba6ef14faa33acf1026d38fe3d5de16f","time":1697004430000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"c134bd6d46aca8a064a19bb65704fbff919268a4","time":1690885984000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"}]},"filePathRelative":"designPattern/模板方法模式.md"}');export{l as comp,u as data};

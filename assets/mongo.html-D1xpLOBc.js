import{_ as n,c as a,a as e,o as t}from"./app-Dz2xZzfz.js";const l={};function i(p,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h2 id="依赖包" tabindex="-1"><a class="header-anchor" href="#依赖包"><span>依赖包</span></a></h2><p>pom.xml</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-data-mongodb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mongodb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mongodb-driver-sync<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p>application.yaml</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">data</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">mongodb</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">uri</span><span class="token punctuation">:</span> mongodb<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>27017/</span>
<span class="line">      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost</span>
<span class="line">      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">27017</span></span>
<span class="line">      <span class="token key atrule">database</span><span class="token punctuation">:</span> mydb</span>
<span class="line">      <span class="token key atrule">username</span><span class="token punctuation">:</span> myuser</span>
<span class="line">      <span class="token key atrule">password</span><span class="token punctuation">:</span> mypass</span>
<span class="line">      <span class="token key atrule">authentication-database</span><span class="token punctuation">:</span> admin</span>
<span class="line">      <span class="token key atrule">gridfs</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api"><span>API</span></a></h2><p>使用<code>MongoTemplate</code>类，就可以完成对MongoDB的增删改查。</p><ul><li>增 <ul><li><code>insert(T object)</code>：插入一个文档</li><li><code>insertAll(Collection&lt;T&gt; objects)</code>：插入多个文档</li><li><code>save(T object)</code>：保存或更新一个文档</li></ul></li><li>删 <ul><li><code>remove(T object)</code>：删除一个文档</li><li><code>removeAll(Collection&lt;T&gt; objects)</code>：删除多个文档</li><li><code>remove(Query query)</code>：删除符合条件的文档</li></ul></li><li>改 <ul><li><code>save(T object)</code>：保存或更新一个文档</li><li><code>updateFirst(Query query, Update update)</code>：更新第一个符合条件的文档</li><li><code>updateMulti(Query query, Update update)</code>：更新所有符合条件的文档</li></ul></li><li>查 <ul><li><code>findAll(Class&lt;T&gt; entityClass)</code>：查询所有文档</li><li><code>findOne(Query query, Class&lt;T&gt; entityClass)</code>：查询第一个符合条件的文档</li><li><code>find(Query query, Class&lt;T&gt; entityClass)</code>：查询所有符合条件的文档</li></ul></li></ul><h3 id="查询详解" tabindex="-1"><a class="header-anchor" href="#查询详解"><span>查询详解</span></a></h3><ol><li>select * from student;</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">List&lt;Student&gt; students = mongoTemplate.findAll(Student.class);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>select * from student where id = 1;</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Query query = new Query(Criteria.where(&quot;id&quot;).is(1));</span>
<span class="line">Student student = mongoTemplate.findOne(query, Student.class);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>select name,age from student where id = 1;</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Query query = new Query(Criteria.where(&quot;id&quot;).is(1)); </span>
<span class="line">query.fields().include(&quot;name&quot;).include(&quot;age&quot;); </span>
<span class="line">Student student = mongoTemplate.findOne(query, Student.class);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>select * from student where name=&#39;Mike&#39; and age=14;</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Query query = new Query(Criteria.where(&quot;name&quot;).is(&quot;Mike&quot;).and(&quot;age&quot;).is(14));</span>
<span class="line">List&lt;Student&gt; students = mongoTemplate.find(query, Student.class);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>select * from student where age&gt;14;</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Query query = new Query(Criteria.where(&quot;age&quot;).gt(14)); </span>
<span class="line">List&lt;Student&gt; students = mongoTemplate.find(query, Student.class);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>select * from student where name != &#39;Mike&#39;;</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ne</span><span class="token punctuation">(</span><span class="token string">&quot;Mike&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>select max(age) as maxAge,min(age) as minAge from student where grade = 4 and class = 3;</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Aggregation aggregation = Aggregation.newAggregation(</span>
<span class="line">    Aggregation.match(Criteria.where(&quot;grade&quot;).is(4).and(&quot;class&quot;).is(3)),</span>
<span class="line">    Aggregation.group().max(&quot;age&quot;).as(&quot;maxAge&quot;).min(&quot;age&quot;).as(&quot;minAge&quot;)</span>
<span class="line">);</span>
<span class="line">AggregationResults&lt;Map&gt; results = mongoTemplate.aggregate(aggregation, &quot;student&quot;, Map.class);</span>
<span class="line">Map result = results.getUniqueMappedResult();</span>
<span class="line">Integer maxAge = (Integer) result.get(&quot;maxAge&quot;);</span>
<span class="line">Integer minAge = (Integer) result.get(&quot;minAge&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li>select age,count(1) from student group by age;</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Aggregation aggregation = Aggregation.newAggregation(</span>
<span class="line">    Aggregation.group(&quot;age&quot;).count().as(&quot;count&quot;)</span>
<span class="line">);</span>
<span class="line">AggregationResults&lt;Map&gt; results = mongoTemplate.aggregate(aggregation, &quot;student&quot;, Map.class);</span>
<span class="line">List&lt;Map&gt; resultList = results.getMappedResults();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="9"><li>select * from student where create_date&gt;&#39;2024-12-01&#39;;</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Query query = new Query(Criteria.where(&quot;create_date&quot;).gt(new Date(&quot;2024-12-01&quot;))); </span>
<span class="line">List&lt;Student&gt; students = mongoTemplate.find(query, Student.class);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="10"><li>select age+10 from student;</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Aggregation aggregation = Aggregation.newAggregation(</span>
<span class="line">    Aggregation.project(&quot;age&quot;)</span>
<span class="line">        .and(&quot;age&quot;).plus(10).as(&quot;newAge&quot;)</span>
<span class="line">);</span>
<span class="line"></span>
<span class="line">AggregationResults&lt;Student&gt; results = mongoTemplate.aggregate(aggregation, &quot;student&quot;, Student.class);</span>
<span class="line"></span>
<span class="line">List&lt;Student&gt; students = results.getMappedResults();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="11"><li>select * from student where age = 14 order by name limit 10;</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Aggregation aggregation = Aggregation.newAggregation(</span>
<span class="line">    Aggregation.match(Criteria.where(&quot;age&quot;).is(14)),</span>
<span class="line">    Aggregation.sort(Direction.ASC, &quot;name&quot;),</span>
<span class="line">    Aggregation.limit(10)</span>
<span class="line">);</span>
<span class="line">AggregationResults&lt;Student&gt; results = mongoTemplate.aggregate(aggregation, &quot;student&quot;, Student.class);</span>
<span class="line">List&lt;Student&gt; students = results.getMappedResults();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="12"><li>select * from student where name in(&#39;Mike&#39;,&#39;Joe&#39;);</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Query query = new Query(Criteria.where(&quot;name&quot;).in(Arrays.asList(&quot;Mike&quot;, &quot;Joe&quot;)));</span>
<span class="line">List&lt;Student&gt; students = mongoTemplate.find(query, Student.class);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="13"><li>select age * 2 as doubleAge from student;</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Aggregation aggregation = Aggregation.newAggregation(</span>
<span class="line">    Aggregation.project(&quot;name&quot;, &quot;age&quot;)</span>
<span class="line">        .and(&quot;age&quot;).multiply(2).as(&quot;doubleAge&quot;)</span>
<span class="line">);</span>
<span class="line">AggregationResults&lt;Student&gt; results = mongoTemplate.aggregate(aggregation, &quot;student&quot;, Student.class);</span>
<span class="line">List&lt;Student&gt; students = results.getMappedResults();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36)]))}const c=n(l,[["render",i]]),u=JSON.parse('{"path":"/java/%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6/mongo.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1747636056000,"contributors":[{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":3,"url":"https://github.com/dongyz8"}],"changelog":[{"hash":"f0a3a489e545221881ab4bd79bd0d1f8c8151c6d","time":1747636056000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"c97979e28496bfd6a49b98c58b764b3950f0de75","time":1739849131000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"d87e5111a0be7603bad1820f8dd6aa87d545e489","time":1737711964000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"}]},"filePathRelative":"java/常用框架/mongo.md"}');export{c as comp,u as data};

import{_ as e,c as l,a as s,b as a,d as p,e as i,r as o,o as c}from"./app-Dz2xZzfz.js";const u={};function r(d,n){const t=o("mirrors");return c(),l("div",null,[n[3]||(n[3]=s(`<h1 id="maven使用宝典" tabindex="-1"><a class="header-anchor" href="#maven使用宝典"><span>Maven使用宝典</span></a></h1><h2 id="配置文件-pom-xml" tabindex="-1"><a class="header-anchor" href="#配置文件-pom-xml"><span>配置文件：pom.xml</span></a></h2><p>每一个maven项目，都会有一个pom.xml。</p><p>maven项目通过pom.xml来描述自己的以下信息：</p><ul><li>本项目的基础信息（groupId、artifactId、version...）</li><li>本项目继承自哪个父pom（parent）</li><li>本项目聚合了哪些pom（modules）</li><li>本项目依赖哪些pom（dependencies）</li><li>本项目的生命周期中需要使用哪些插件（plugins）</li><li>与本项目相关的maven仓库（repositories）</li><li>本项目有哪些全局变量（properties）</li><li>本项目在不同运行环境（集成测试环境sit、用户测试环境uat、生产环境prod等）（profiles）</li><li>本项目有哪些资源文件（resources）</li><li>...</li></ul><h3 id="基础信息" tabindex="-1"><a class="header-anchor" href="#基础信息"><span>基础信息</span></a></h3><ul><li>packaging：pom | jar(默认)</li><li>scope: test | compile(默认) | runtime | provided | system</li><li>name</li><li>description</li><li>licenses</li><li>scm</li><li>developers</li></ul><h3 id="pom的继承-parent" tabindex="-1"><a class="header-anchor" href="#pom的继承-parent"><span>pom的继承（parent）</span></a></h3><p>通过&quot;parent&quot;标签，来表示当前pom继承自哪个项目pom。</p><p>若没有写明，则默认继承的是super pom（超级pom）。</p><blockquote><p>超级pom：存储在 %MAVEN_HOME%/lib 的某个jar包中。 定义了以下内容：</p><ul><li>jar包仓库：默认从中心仓库拉取（http://repo1.maven.org/maven2）</li><li>plugin仓库：默认从中心仓库拉取（http://repo1.maven.org/maven2）</li><li>定义好了每个生命周期执行时，默认使用哪些plugins 超级pom无需定义artifactId、groupId、version。</li></ul></blockquote><p>继承后，子pom相当于拥有了父pom的以下配置：</p><ul><li>groupId :项目组ID,项目坐标的核心元素</li><li>version :项目版本,项目坐标的核心元素</li><li>description :项目的描述信息</li><li>organnization :项目的组织信息</li><li>inceptionYear :项目的创始年份</li><li>url :项目的URL地址</li><li>developers :项目的开发者信息</li><li>dependencies :项目的依赖配置</li><li>dependencyManagement :项目的依赖管理配置</li><li>repositories :项目的仓库配置</li><li>build :包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等</li><li>properties ：定义一些当前项目使用的变量名称，在子类中可以通过$获取直接使用</li></ul><hr><h3 id="pom的依赖管理-dependencies" tabindex="-1"><a class="header-anchor" href="#pom的依赖管理-dependencies"><span>pom的依赖管理（dependencies）</span></a></h3><p>以前，在维护老旧的、没有使用maven的项目，当我们需要引入第三方库时（例如Spring、Mybatis等等），我们需要人工从 网上把JAR包下载，并放到项目的/lib目录下才能使用；</p><p>而使用maven后，只要你在pom.xml中写明你需要哪些第三方库（dependencies），maven会在构建项目（Build）时， 去相应的仓库下载你需要的JAR包下来。</p><p>存储在仓库中的这些第三方库（JAR），本质上也是一个maven项目，也有自己的pom.xml文件，描述着自己依赖着哪些第三方库。</p><p>假设你的项目是A，A依赖于第三方库B，B依赖于C，那么A项目在Build时，会同时把B、C两个库下载下来。</p><p>这就叫<strong>传递依赖（Transitive Dependencies）</strong>。</p><blockquote><p>现在考虑一种情况，下面箭头表示依赖：</p><p>A-&gt;B-&gt;C-&gt;D1（版本为1的D库）</p><p>E-&gt;F-&gt;G-&gt;D2（版本为2的D库）</p><p>A项目在Build时，会下载B、C和D1库；</p><p>当A需要依赖E时，E需要D2库，那此时A是下载D1库还是D2库呢？</p></blockquote><p>以上情况叫<strong>依赖冲突</strong>，即项目有可能依赖同一个库的不同版本。</p><p>针对这种情况，maven有一套机制叫<strong>依赖调解</strong>，来选择使用哪个版本的库。</p><p><strong>机制1：根据依赖的深度来判断，深度越低越优先。</strong></p><p>回到上面的情况，D1的深度是3（A-&gt;D1经历3个节点），D2的深度是4（A-&gt;E-&gt;F-&gt;G-D2),因此最终会选择D1库。</p><blockquote><p>若我想使用的其实是D2库，那我该怎么办？</p></blockquote><p>很简单，A直接显式依赖D2库即可。直接依赖D2后，D2的深度变为1。</p><p>下面再介绍几种“依赖冲突”的情况。</p><p>情况1：</p><blockquote><p>A-&gt;B-&gt;C-&gt;D1（版本为1的D库）</p><p>A-&gt;F-&gt;G-&gt;D2（版本为2的D库）</p></blockquote><p>此时产生冲突，且冲突的两个库深度一样（均为3），这种情况下，先定义的优先（B比F先定义，因此选择D1库），</p><p><strong>机制2：深度一致时，先定义的库优先级更高</strong></p><p>情况2：</p><blockquote><p>A继承项目B，且B依赖D1</p><p>A-&gt;C-&gt;D2</p></blockquote><p>“A继承项目B，且B依赖D1”，其实就等于A直接依赖了D1，因此D1优先级更高</p><p>情况3：</p><blockquote><p>A继承项目B，且B依赖D1</p><p>A-&gt;D3</p><p>A-&gt;C-&gt;D2</p></blockquote><p>因为A直接依赖了D3，所以D3优先级肯定最高；其次D1；最低是D2。</p><p><strong>机制3：显式直接依赖，优先级最高；其次是继承依赖（来自父pom的依赖）；最后是传递依赖（来自依赖的依赖）</strong></p><hr><h3 id="依赖的作用域-dependency-scope" tabindex="-1"><a class="header-anchor" href="#依赖的作用域-dependency-scope"><span>依赖的作用域（dependency.scope）</span></a></h3><ul><li>compile（默认）：编译时需要依赖，会在编译时把JAR包放到项目中</li><li>provided：依赖由web容器提供，JAR包不会被放到项目中</li><li>runtime：运行时需要依赖，编译时不需要（例如JDBC API包）</li><li>test：测试编译和测试阶段需要依赖</li><li>import：只能用在dependencyManagement、且type为pom的情况下。可理解为“继承某个库的依赖”、<strong>多继承模式</strong>。</li><li>system：本地提供的JAR包，不会去maven仓库下载，需要用到systemPath标签</li></ul><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.7.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">&gt;</span></span>\${java.home}/../lib/mysql-connector-java.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="依赖的类型-dependency-type" tabindex="-1"><a class="header-anchor" href="#依赖的类型-dependency-type"><span>依赖的类型（dependency.type）</span></a></h3><p>type 有 jar 、 war 、 bar 、 pom几种类型，默认为jar。</p><ul><li>jar：依赖dependency对应的Jar包</li><li>pom：继承dependency的pom文件中，定义在dependencyManagement的dependency</li></ul><hr><h3 id="依赖管理器的作用-dependencymanagement" tabindex="-1"><a class="header-anchor" href="#依赖管理器的作用-dependencymanagement"><span>依赖管理器的作用（dependencyManagement）</span></a></h3><ul><li>限制子pom只能使用某些Jar包的固定版本</li></ul><hr><h3 id="pom的聚合-modules" tabindex="-1"><a class="header-anchor" href="#pom的聚合-modules"><span>pom的聚合（modules）</span></a></h3><blockquote><p>聚合跟继承的相同点以及区别？</p></blockquote><p>相同点；</p><ul><li>都是描述父pom与子pom的关系。</li></ul><p>父pom的特征：</p><ul><li>packaging = pom</li><li>只有dependencyManagement，没有dependency</li></ul><p>子pom的特征：</p><ul><li>packaging = jar</li></ul><p>不同点：</p><ul><li>继承是为了减少重复配置，将通用配置都写到父pom；聚合则是为了提供按业务将系统分成多个模块的功能</li></ul><hr><h2 id="配置文件-setting-xml" tabindex="-1"><a class="header-anchor" href="#配置文件-setting-xml"><span>配置文件：setting.xml</span></a></h2><h2 id="maven仓库" tabindex="-1"><a class="header-anchor" href="#maven仓库"><span>Maven仓库</span></a></h2><p>Maven仓库有三种类型：本地仓库（Local）、中央仓库（Central）、远程仓库（Remote）</p><p><em><strong>本地仓库</strong></em></p><p><em><strong>中央仓库</strong></em></p><p>中央仓库地址：https://repo1.maven.org/maven2/</p><p>依赖包搜索地址：https://mvnrepository.com/</p><p><em><strong>远程仓库</strong></em></p><p><em><strong>Maven仓库镜像（Mirror）</strong></em></p>`,71)),a("ul",null,[a("li",null,[n[0]||(n[0]=p("在setting.xml 中的")),i(t),n[1]||(n[1]=p("可配置Maven的仓库镜像；"))]),n[2]||(n[2]=a("li",null,"仓库镜像配置示例如下：",-1))]),n[4]||(n[4]=s(`<div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token comment">&lt;!-- </span>
<span class="line">【id】 即镜像ID，在pom.xml可通过镜像ID指定从哪个仓库进行下载</span>
<span class="line">【mirrorOf】镜像类型。可填：1. &quot;*&quot;、2.&quot;central&quot;、3.&quot;仓库id1,仓库id2...&quot;</span>
<span class="line">若镜像类型为*，表明所有下载均通过该镜像来进行（无论配置了多少个镜像）</span>
<span class="line">若镜像类型为central，则表明该镜像为中央仓库的镜像</span>
<span class="line"></span>
<span class="line">【name】</span>
<span class="line">【url】</span>
<span class="line">--&gt;</span></span>
<span class="line"><span class="token comment">&lt;!-- 阿里云仓库 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">&lt;!-- 中央仓库1 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>repo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Human Readable Name for this Mirror.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://repo1.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>若配置了多个仓库，则默认只会使用第一个仓库（除非第一个仓库连接不上，则使用下一个）</li></ul>`,2))])}const g=e(u,[["render",r]]),k=JSON.parse('{"path":"/java/maven/","title":"Maven","lang":"en-US","frontmatter":{"title":"Maven","sidebar":"heading","sidebarDepth":2},"git":{"updatedTime":1750240340000,"contributors":[{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":4,"url":"https://github.com/dongyz8"}],"changelog":[{"hash":"ad8fc1a188d6829c38676e985c8e2097211af10d","time":1750240340000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"52a24353a83460b14fb9351a1c4f301fcc3acd23","time":1736936120000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"2107fe45a32694cb96e49385ca5e0106c7ec14a9","time":1732669486000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"8f077c536b5e7f2af222b7b28b24c4d82f0bb36e","time":1730455849000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"}]},"filePathRelative":"java/maven/README.md"}');export{g as comp,k as data};

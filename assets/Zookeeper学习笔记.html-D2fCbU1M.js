import{_ as n,c as e,a,o as l}from"./app-iMoEB5u2.js";const o={};function p(i,s){return l(),e("div",null,s[0]||(s[0]=[a(`<h1 id="zookeeper学习笔记" tabindex="-1"><a class="header-anchor" href="#zookeeper学习笔记"><span>Zookeeper学习笔记</span></a></h1><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h3><p>【Zookeeper入门看这篇就够了】<a href="https://blog.csdn.net/java_66666/article/details/81015302" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/java_66666/article/details/81015302</a></p><h3 id="zookeeper是做什么的" tabindex="-1"><a class="header-anchor" href="#zookeeper是做什么的"><span>Zookeeper是做什么的？</span></a></h3><p>简单的说，就是一个有监听通知机制的文件系统。</p><blockquote><p>怎么理解？</p></blockquote><p>就是你可以在Zookeeper上增加、删除目录（在Zookeeper中目录被称为znode）；</p><p>目录里可以存放文件；</p><p>同时，你的其他应用程序可以监听Zookeeper上文件的变化；</p><p>当文件有改动时，Zookeeper可以将改动通知到你的应用程序。</p><blockquote><p>有什么应用场景呢？</p></blockquote><p><strong>1.发布/订阅</strong></p><p>可以做类似于Spring Cloud Config（分布式配置管理）的功能。</p><p>将SpringCloud项目的配置文件全部放到Zookeeper上，需要改配置时，不用到项目里一个一个改，直接在Zookeeper上改，然后由Zookeeper通知到项目即可。</p><p><strong>2.Master选举</strong></p><p><strong>3.分布式锁</strong></p><p><strong>4.分布式队列</strong></p><p><strong>5.集群管理</strong> kafka的集群管理就是通过zookeeper来完成。</p><h3 id="zookeeper的特性" tabindex="-1"><a class="header-anchor" href="#zookeeper的特性"><span>Zookeeper的特性</span></a></h3><ul><li>文件（znode）有版本号（dataVersion）</li><li>同一级节点 key 名称是唯一的（创建重复节点会返回报错）</li><li>可创建临时节点。当session 关闭后，临时节点自动清除</li><li>watch 机制，监听节点变化</li><li>为了保持高吞吐和低延迟，每个znode的存放数据上限 为 1M</li></ul><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><h3 id="常见操作" tabindex="-1"><a class="header-anchor" href="#常见操作"><span>常见操作</span></a></h3><h4 id="服务端的命令行操作" tabindex="-1"><a class="header-anchor" href="#服务端的命令行操作"><span>服务端的命令行操作</span></a></h4><ul><li>启动服务端 zkServer.sh start</li><li>关闭服务端 zkServer.sh stop</li><li>查看服务端状态 zkServer.sh status</li></ul><h4 id="客户端的命令行操作" tabindex="-1"><a class="header-anchor" href="#客户端的命令行操作"><span>客户端的命令行操作</span></a></h4><ul><li>启动客户端 zkCli.sh</li><li>退出客户端 Ctrl+C</li><li>创建名为“hello”、值为18的znode（目录） create /hello 18</li><li>查看“hello”znode的详细信息 get /hello</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment">#返回如下值</span></span>
<span class="line"><span class="token number">18</span> <span class="token comment">#hello的值</span></span>
<span class="line">cZxid <span class="token operator">=</span> 0x49 <span class="token comment">#创建时znode的id</span></span>
<span class="line">ctime <span class="token operator">=</span> Thu Mar <span class="token number">10</span> 08:47:46 UTC <span class="token number">2022</span> <span class="token comment">#当前znode创建的时间</span></span>
<span class="line">mZxid <span class="token operator">=</span> 0x53 <span class="token comment">#当前znode的id</span></span>
<span class="line">mtime <span class="token operator">=</span> Thu Mar <span class="token number">10</span> 08:53:06 UTC <span class="token number">2022</span> <span class="token comment">#当前znode上一次修改的时间</span></span>
<span class="line">pZxid <span class="token operator">=</span> 0x49 <span class="token comment">#子节点id</span></span>
<span class="line">cversion <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#子节点的version</span></span>
<span class="line">dataVersion <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">#当前znode值的版本号，修改过一次，所以版本号为2</span></span>
<span class="line">aclVersion <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#权限版本</span></span>
<span class="line">ephemeralOwner <span class="token operator">=</span> 0x0</span>
<span class="line">dataLength <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">#值的长度</span></span>
<span class="line">numChildren <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#子节点个数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修改“hello”znode的值为19 set /hello 19</li><li>删除“hello”znode（znode内不可有子znode，否则删除失败） delete /hello</li><li>删除“hello”znode及其子znode deleteall /hello</li><li>在“hello”下创建子znode“subhello” create /hello/subhello 20</li><li>查看“hello”下的所有子znode ls /hello</li><li>查看根目录下的所有znode ls /</li><li>查看“subhello”的值 get /hello/subhello</li><li>监听“hello”znode的值，如果有变化则返回通知。 get /hello watch</li><li>创建临时节点（当session关闭后，临时节点清除） create -e /hello-linshi 10</li><li>创建顺序节点</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment">#自动创建按顺序生成的znode（后面加上10位数组成的序号）</span></span>
<span class="line"><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> <span class="token number">8</span><span class="token punctuation">]</span> create <span class="token parameter variable">-s</span> <span class="token parameter variable">-e</span> /hello/obj <span class="token number">0</span></span>
<span class="line">Created /hello/obj0000000001</span>
<span class="line"><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> <span class="token number">9</span><span class="token punctuation">]</span> create <span class="token parameter variable">-s</span> <span class="token parameter variable">-e</span> /hello/obj <span class="token number">0</span></span>
<span class="line">Created /hello/obj0000000002</span>
<span class="line"><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> <span class="token number">10</span><span class="token punctuation">]</span> create <span class="token parameter variable">-s</span> <span class="token parameter variable">-e</span> /hello/obj <span class="token number">0</span></span>
<span class="line">Created /hello/obj0000000003</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30)]))}const r=n(o,[["render",p]]),c=JSON.parse('{"path":"/devops/Zookeeper%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html","title":"Zookeeper学习笔记","lang":"en-US","frontmatter":{},"git":{"updatedTime":1728468221000,"contributors":[{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":1,"url":"https://github.com/dongyz8"}],"changelog":[{"hash":"a124420178706444697801263f1005096bad2c82","time":1728468221000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"}]},"filePathRelative":"devops/Zookeeper学习笔记.md"}');export{r as comp,c as data};

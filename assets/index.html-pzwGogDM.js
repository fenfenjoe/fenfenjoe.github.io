import{_ as s,c as a,a as e,o as p}from"./app-iMoEB5u2.js";const t="/images/Kafka.png",l={};function c(o,n){return p(),a("div",null,n[0]||(n[0]=[e('<h1 id="kafka" tabindex="-1"><a class="header-anchor" href="#kafka"><span>Kafka</span></a></h1><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h3><p>作用：分布式消息队列中间件<br> 语言：scala（0.9版本之前）、java（新版）<br> 依赖：zookeeper（0.5.x后kafka内置了zookeeper的单机版环境）</p><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h3><p>【官网】<a href="https://kafka.apache.org/" target="_blank" rel="noopener noreferrer">https://kafka.apache.org/</a> 【kafka的版本号与版本演进】<a href="https://blog.csdn.net/liuxiao723846/article/details/106020738/" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/liuxiao723846/article/details/106020738/</a><br> 【apache kafka技术分享系列(目录索引)】<a href="https://blog.csdn.net/lizhitao/article/details/39499283" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/lizhitao/article/details/39499283</a><br> 【知乎：kafka(一) 消息队列的本质】<a href="https://zhuanlan.zhihu.com/p/355343254" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/355343254</a><br> 【Kafka知识总结之Broker原理总结】<a href="https://blog.csdn.net/yhflyl/article/details/123582735" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/yhflyl/article/details/123582735</a></p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><ol><li>日志分析、系统监控、用户行为追踪（Kafka是著名的ELK系统中的一部分）</li><li>大数据中做数据分流：（流数据处理、离线数据分析、在线数据分析） <ul><li>分流到离线存储平台（HDFS）</li><li>分流到离线计算平台（Hive仓库）</li><li>分流到实时流水计算（Storm，Spark）</li><li>分流到海量数据查询（HBase）</li><li>分流到及时查询（ElasticSearch）</li></ul></li><li>应用程序</li></ol><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><figure><img src="'+t+`" alt="kafka.png" tabindex="0" loading="lazy"><figcaption>kafka.png</figcaption></figure><p><strong>生产者（Producer）</strong><br> 发送消息的程序</p><p><strong>消息（Message）</strong><br> 存储在分区中，一个分区就是一个消息队列；<br> 无论是否被消费，消息都会存储在消息队列中；<br> 消息有过期时间，过期后会被自动清除；</p><p><strong>代理（Broker）</strong><br> 相当于一台物理主机。上面运行着kafka进程。存储kafka消息的实际地方。<br> Broker又分为Controller Broker和普通的Broker。</p><blockquote><p>Controller Broker，又称为Leader Broker，主要作用是在ZooKeeper 的帮助下管理和协调整个 Kafka 集群。</p><ul><li>创建、删除主题，增加分区并分配leader分区</li><li>集群Broker管理（新增 Broker、Broker 主动关闭、Broker 故障)</li><li>preferred leader选举</li><li>分区重分配 集群启动时，会从所有Broker中选举出一个作为Controller。</li></ul></blockquote><p><strong>Zookeeper</strong><br> 负责存储Broker的元信息，包括Broker保存了哪些Topic，有哪些分区Partition等。</p><p><strong>消费者（Consumer）</strong><br> 接收消息的程序</p><p><strong>消费者组（Consumer Group）</strong><br> 多个消费者可以划分成一个消费者组。每个消费者组对一条消息只能处理一次。<br> 消费者默认属于default消费者组。</p><p><strong>主题（Topic）</strong><br> 逻辑上的一个消息组。一个Topic还可以分成多个Partitions，存在不同的Broker里。</p><p><strong>分区（Partitions）</strong><br> Partitions是存储的最小单位。<br> 一个Broker里可存储多个Partitions。<br> 同一消费者组中，每个Partition只能由一个消费者负责。</p><p><strong>副本（Replication）</strong><br> Replication是分区的副本，副本不会跟分区存到同一个Broker上。<br> 分区的副本数不能大于Broker的数量。否则会抛出异常。</p><p><strong>偏移量（Partition Offset）</strong><br> 可理解为“指针”、“分区消息数组的下标”；<br> 分区会为不同的消费者组维护各自的偏移量；<br> 表示消费者组消费到分区中的哪一条消息；</p><h3 id="faq" tabindex="-1"><a class="header-anchor" href="#faq"><span>FAQ</span></a></h3><h4 id="_1-kafka是做什么的" tabindex="-1"><a class="header-anchor" href="#_1-kafka是做什么的"><span>1.kafka是做什么的？</span></a></h4><p>一个分布式消息队列中间件（MQ）。</p><p>kafka负责接收生产者（APP）发送过来的消息，并将这些消息转发给消费者（另一些APP）；</p><h4 id="_2-kafka消息类型" tabindex="-1"><a class="header-anchor" href="#_2-kafka消息类型"><span>2.kafka消息类型</span></a></h4><ul><li>Avro消息（官方推荐）</li><li>Json</li><li>XML</li><li>Java Bean</li></ul><h4 id="_3-kafka消息如何流转" tabindex="-1"><a class="header-anchor" href="#_3-kafka消息如何流转"><span>3.kafka消息如何流转</span></a></h4><p><strong>创建主题</strong><br> 需要先在kafka创建好<strong>主题（Topic）</strong>，kafka会根据接收到的消息按主题进行分类；<br> 创建主题时，还需要指定主题的<strong>分区数（partitions）</strong> 和<strong>副本（replication-factor）数</strong>。</p><p><strong>消息发送</strong><br> 生产者在发送消息前，需要指定消息发送到哪个主题(Topic)。</p><p>kafka实际用分区(partition)来存储消息。因此生产者还需要指定将消息发送到哪个分区。</p><blockquote><p><strong>生产者如何选择分区(partition)?</strong> 生产者可从kafka集群的任意broker中，获得所有kafka broker的元信息。包括topic有多少个分区(partition)，各个分区的leader在哪个broker等。<br> 取得partition地址列表后，Producer需要指定负载均衡策略，主动选择消息发送到分区的策略。<br> 有以下几种策略：</p><ul><li>轮询</li><li>随机</li><li>基于某个key</li></ul></blockquote><p>配置好负载均衡策略后，每次Producer发送消息时，便会自动根据策略选择分区(partition)。</p><p><strong>消息接收</strong><br> 发送消息时会指定<strong>主题（Topic）</strong>，消费者只接收自己关注的主题的消息；</p><blockquote><p>就像微博、Twitter这样，关注某个博主后就会收到该博主的动态信息。</p></blockquote><p>还可以对消费者分组（Group）。但同一组内的消费者，不会接收到同一分区的消息。</p><blockquote><p>这样设计是为了确保分组（Group）接收到主题（Topic）的消息是没有重复的</p></blockquote><p><strong>消息消费</strong></p><ol><li>消费者和Kafka各自维护着该Topic的一个偏移量（offset），表示它已经成功消费到哪个位置。</li><li>当有新消息到达Kafka中，Kafka不会主动推新消息给消费者；相反，由消费者在下一次拉取请求中发现这些新消息。</li><li>消费者通过<strong>长轮询（long poll）</strong> 机制，去监听Topic是否有新消息。</li><li>消费者通过比较<strong>上次提交的偏移量</strong>和<strong>Kafka中存储的偏移量</strong>来确定Topic中是否有新消息可以消费。</li><li>当处理完消息后，消费者可以选择<strong>手动提交偏移量</strong>或<strong>自动提交偏移量</strong></li></ol><h4 id="_4-kafka的消息如何持久化" tabindex="-1"><a class="header-anchor" href="#_4-kafka的消息如何持久化"><span>4.kafka的消息如何持久化？</span></a></h4><p>消息保存在<strong>日志文件</strong>中；新增一条消息 = 向日志文件追加内容。</p><p>通过内存来缓存消息，并会尽快写入到日志文件中。</p><p>写入到日志文件的消息<strong>默认会保留7天</strong>。</p><h4 id="_5-kafka如何做负载均衡" tabindex="-1"><a class="header-anchor" href="#_5-kafka如何做负载均衡"><span>5.kafka如何做负载均衡？</span></a></h4><p><strong>对Producer的负载均衡：</strong><br> 对于某个Topic，kafka会将Zookeeper中维护的该Topic的“存活Broker列表/存活Partition列表”提供给Producer，由Producer自己决定将消息发送到哪里（由Producer自己做负载均衡）。</p><p><strong>对Consumer的负载均衡：</strong><br> 在Consumer Group中，有Consumer的加入或离开，便会触发Partition均衡：</p><ul><li><p>假设有4个Consumer（ABCD），8个Partition（12345678）<br> 每个Consumer两个分区：A=12,B=34,C=56,D=78</p></li><li><p>假设有8个Consumer（ABCDEFGH），4个分区（1234）<br> 因为同一Group中的Consumer不能消费同一个分区，因此：A=1,B=2,C=3,D=4,E=null,...</p></li></ul><h4 id="_6-kafka的副本-replication-机制" tabindex="-1"><a class="header-anchor" href="#_6-kafka的副本-replication-机制"><span>6.kafka的副本（replication）机制？</span></a></h4><p>kafka可为每个partition设置副本，副本会被存储到不同的Broker上，并且副本的数据与partition本身会保持一致。</p><p>副本分为两种类型：Leader和Follower；</p><p>Leader负责处理read-write请求，Follower负责同步Leader中的数据；</p><p>每个partition的副本中，都会有1个Leader和0~N个Follower；</p><p>只要有一个副本存活，那么该partition也能正常工作；</p><p><strong>当有新消息进来，所有Follower都将消息保存成功后，这条消息才算Commited，Consumer才能消费这条消息。</strong></p><h4 id="_7-什么是ar、isr、osr" tabindex="-1"><a class="header-anchor" href="#_7-什么是ar、isr、osr"><span>7.什么是AR、ISR、OSR？</span></a></h4><p>AR：Assigned Repllicas，即副本。分区的所有副本统称AR。<br> ISR：In-Sync Replicas，分区中能与leader保持一定程度同步的副本，统称ISR。<br> OSR：Out-Sync Relipcas，分区中与leader相比滞后过多的副本，统称OSR。<br> 因此AR=ISR+OSR。<br> kafka可以忍受的“滞后”的程度可以通过参数配置。</p><h4 id="_8-kafka的选举机制" tabindex="-1"><a class="header-anchor" href="#_8-kafka的选举机制"><span>8.kafka的选举机制</span></a></h4><p>kafka在三个地方用到了选举机制：</p><ul><li>Broker之间选leader</li><li>Partition的多副本之间选leader</li><li>消费者组中消费者之间选leader</li></ul><p>【Broker Leader】 Leader的作用：</p><ul><li>创建、删除主题，增加分区并分配leader分区</li><li>集群Broker管理（新增 Broker、Broker 主动关闭、Broker 故障)</li><li>preferred leader选举</li><li>分区重分配</li></ul><p>怎样触发Leader选举：</p><ul><li>kafka集群启动</li></ul><p>【Replica Leader】 Leader的作用：</p><p>怎样触发Leader选举（Rebalance）：</p><ul><li>Leader 副本下线</li><li>手动运行 kafka-reassign-partitions 命令</li><li>设置broker端参数auto.leader.rebalance.enable为true（默认值），这样controller定时自动调整preferred leader</li><li>Leader 副本所在Broker 正常关闭</li></ul><p>如何选举：</p><ul><li>从Zookeeper中读取当前分区的所有ISR(in-sync replicas)集合</li><li>调用配置的分区选择算法选择分区的leader(默认：当前分区副本列表(AR)中首个存活且处于 ISR 列表中的副本作为 Leader 副本)</li></ul><h4 id="_9-kafka集群的异常情况-脑裂" tabindex="-1"><a class="header-anchor" href="#_9-kafka集群的异常情况-脑裂"><span>9.kafka集群的异常情况：脑裂</span></a></h4><p>略</p><h4 id="_10-zookeeper在kafka集群中有什么作用" tabindex="-1"><a class="header-anchor" href="#_10-zookeeper在kafka集群中有什么作用"><span>10.Zookeeper在Kafka集群中有什么作用？</span></a></h4><p>Broker、Consumer的注册中心；<br> 监控Partition Leader的存活性；</p><h4 id="_11-kafka能保证消息按顺序消费吗" tabindex="-1"><a class="header-anchor" href="#_11-kafka能保证消息按顺序消费吗"><span>11.kafka能保证消息按顺序消费吗？</span></a></h4><p>可以，但需要生产者在发消息时，设置一个key，然后kafka会根据这个key将消息都发往同一个partition中；<br> 然后，因为一个partition只能由同一消费者组中的一个消费者消费，所以便保证了顺序消费。</p><h4 id="_12-kafka的事务控制" tabindex="-1"><a class="header-anchor" href="#_12-kafka的事务控制"><span>12.kafka的事务控制</span></a></h4><ol><li>假设你的是SpringBoot项目，需要application.properties处添加事务的配置</li></ol><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties"><pre><code class="language-properties"><span class="line"><span class="token comment"># 启用幂等性生产者（使用事务必须）</span></span>
<span class="line"><span class="token key attr-name">spring.kafka.producer.properties.enable.idempotence</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></span>
<span class="line"><span class="token comment"># 隔离级别（默认值是read_uncommitted‌）</span></span>
<span class="line"><span class="token key attr-name">spring.kafka.producer.properties.isolation.level</span><span class="token punctuation">=</span><span class="token value attr-value">read_committed</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>创建KafkaTemplate并添加事务管理器</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaProducerConfig</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">producerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> configProps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">ENABLE_IDEMPOTENCE_CONFIG</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 其他配置...</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>configProps<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">producerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">KafkaTransactionManager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KafkaTransactionManager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">producerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用KafkaTemplate发送事务消息</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Service</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaService</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendTransactionalMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        kafkaTemplate<span class="token punctuation">.</span><span class="token function">executeInTransaction</span><span class="token punctuation">(</span>operations <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                operations<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                operations<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 其他业务逻辑...</span></span>
<span class="line">                <span class="token comment">// 如果一切正常，事务会自动提交</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 如果发生异常，事务会自动回滚</span></span>
<span class="line">                <span class="token keyword">throw</span> e<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实际操作" tabindex="-1"><a class="header-anchor" href="#实际操作"><span>实际操作</span></a></h3><h4 id="下载" tabindex="-1"><a class="header-anchor" href="#下载"><span>下载</span></a></h4><p>http://kafka.apache.org/downloads</p><h4 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h4><p>解压即可</p><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h4><p><strong>/config/server.properties（重要）</strong><br> Kafka服务器配置<br> broker.id ：当前Kafka服务器在集群中的唯一ID<br> listeners ： 当前Kafka服务器监听的端口（默认9092）<br> zookeeper.connect ： 当前Kafka服务器连接的zookeeper地址（默认为localhost:2181）</p><p><strong>/config/consumer.properites</strong><br> 消费者配置<br><strong>/config/producer.properties</strong><br> 生产者配置</p><h4 id="启动" tabindex="-1"><a class="header-anchor" href="#启动"><span>启动</span></a></h4><ol start="0"><li>注意事项</li></ol><ul><li>JDK路径中不能有空格或括号，不然会遇到以下情况：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">F:<span class="token punctuation">\\</span>DataBase<span class="token punctuation">\\</span>kafka_2.12-3.0.0<span class="token punctuation">\\</span>bin<span class="token punctuation">\\</span>windows<span class="token operator">&gt;</span>zookeeper-server-start.bat <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/config/zookeeper.properties</span>
<span class="line"></span>
<span class="line">此时不应有 <span class="token punctuation">\\</span>Java<span class="token punctuation">\\</span>jdk1.8.0_73<span class="token punctuation">\\</span>lib</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JDK的bin文件夹下需要有server文件夹，若没有，则需要到jre/bin中拷贝过来，否则会遇到以下情况：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">F:<span class="token punctuation">\\</span>DataBase<span class="token punctuation">\\</span>kafka_2.12-3.0.0<span class="token punctuation">\\</span>bin<span class="token punctuation">\\</span>windows<span class="token operator">&gt;</span>zookeeper-server-start.bat <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/config/zookeeper.properties</span>
<span class="line"></span>
<span class="line">Error: missing <span class="token variable"><span class="token variable">\`</span>server&#39; JVM at <span class="token variable">\`</span></span>F:<span class="token punctuation">\\</span>jdk<span class="token punctuation">\\</span>jdk1.8.0_60<span class="token punctuation">\\</span>bin<span class="token punctuation">\\</span>server<span class="token punctuation">\\</span>jvm.dll&#39;.</span>
<span class="line">Please <span class="token function">install</span> or use the JRE or JDK that contains these missing components.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>启动Zookeeper</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment">#在Kafka解压目录下，启动Kafka自带的Zookeeper</span></span>
<span class="line"><span class="token comment">#Linux</span></span>
<span class="line">bin/zookeeper-server-start.sh config/zookeeper.properties</span>
<span class="line"><span class="token comment">#Windows</span></span>
<span class="line">bin/windows/zookeeper-server-start.bat <span class="token punctuation">..</span>/config/zookeeper.properties</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>启动Kafka服务器</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment">#在Kafka解压目录下</span></span>
<span class="line">bin/kafka-server-start.sh config/server.properties</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="topic操作" tabindex="-1"><a class="header-anchor" href="#topic操作"><span>Topic操作</span></a></h4><p><strong>创建Topic</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment">#注意！这个创建Topic的同时还会导入数据。</span></span>
<span class="line"><span class="token comment">#数据量比较大（差不多有1G），建议单机版不要用这个进行测试</span></span>
<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token parameter variable">--zookeeper</span> </span>
<span class="line">localhost:2181 --replication-factor <span class="token number">1</span> <span class="token parameter variable">--partitions</span> <span class="token number">1</span> <span class="token parameter variable">--topic</span> <span class="token builtin class-name">test</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看Topic</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">bin/kafka-topics.sh <span class="token parameter variable">--list</span> <span class="token parameter variable">--zookeeper</span> localhost:2181</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="java-spring-boot集成kafka" tabindex="-1"><a class="header-anchor" href="#java-spring-boot集成kafka"><span>Java Spring-Boot集成Kafka</span></a></h3><h4 id="kafka生产者" tabindex="-1"><a class="header-anchor" href="#kafka生产者"><span>kafka生产者</span></a></h4><p>maven -- pom.xml</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>application.yml</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token comment"># 更多配置见：https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties</span></span>
<span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">kafka</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">9092</span></span>
<span class="line">    <span class="token key atrule">producer</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token comment"># 消息重发的次数</span></span>
<span class="line">      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">0</span></span>
<span class="line">      <span class="token comment"># 一个批次可占多少内存</span></span>
<span class="line">      <span class="token comment"># 批次（batch）：生产者可以以批次的形式推送消息，一个批次包含多条消息；</span></span>
<span class="line">      <span class="token comment"># 可设置什么时候推送批次：批次中消息累计数量（500条）、时间间隔（100ms）、批次大小（64KB）等</span></span>
<span class="line">      <span class="token key atrule">batch-size</span><span class="token punctuation">:</span> <span class="token number">16384</span></span>
<span class="line">      <span class="token comment"># 生产者内存缓冲区大小</span></span>
<span class="line">      <span class="token key atrule">buffer-memory</span><span class="token punctuation">:</span> <span class="token number">33554432</span></span>
<span class="line">      <span class="token key atrule">key-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer</span>
<span class="line">      <span class="token key atrule">value-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer</span>
<span class="line">      <span class="token key atrule">acks</span><span class="token punctuation">:</span> all</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Service类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">KafkaTemplate</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">SendResult</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ListenableFuture</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ListenableFutureCallback</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Service</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaProducerService</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 构造器注入KafkaTemplate</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">KafkaProducerService</span><span class="token punctuation">(</span><span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>kafkaTemplate <span class="token operator">=</span> kafkaTemplate<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 同步发送消息（阻塞等待结果）</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessageSync</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 发送消息并等待确认</span></span>
<span class="line">            <span class="token class-name">SendResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> key<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送成功 -&gt; Topic: &quot;</span> <span class="token operator">+</span> topic </span>
<span class="line">                <span class="token operator">+</span> <span class="token string">&quot;, Partition: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getRecordMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line">                <span class="token operator">+</span> <span class="token string">&quot;, Offset: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getRecordMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送失败: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 可添加重试或补偿逻辑</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 异步发送消息（非阻塞，回调处理）</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessageAsync</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendResult</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> </span>
<span class="line">            kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> key<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        future<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListenableFutureCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送成功 -&gt; Topic: &quot;</span> <span class="token operator">+</span> topic </span>
<span class="line">                    <span class="token operator">+</span> <span class="token string">&quot;, Partition: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getRecordMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送失败: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 可记录失败消息到数据库或重试队列</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="kafka消费者" tabindex="-1"><a class="header-anchor" href="#kafka消费者"><span>kafka消费者</span></a></h4><p>maven -- pom.xml</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>application.yml</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">kafka</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">9092</span>  <span class="token comment"># Kafka服务器地址</span></span>
<span class="line">    <span class="token key atrule">consumer</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">group-id</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>consumer<span class="token punctuation">-</span>group      <span class="token comment"># 消费者组ID</span></span>
<span class="line">      <span class="token key atrule">auto-offset-reset</span><span class="token punctuation">:</span> earliest       <span class="token comment"># 从最早的消息开始消费（可选：latest/earliest）</span></span>
<span class="line">      <span class="token key atrule">key-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer</span>
<span class="line">      <span class="token key atrule">value-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer</span>
<span class="line">      <span class="token key atrule">enable-auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>         <span class="token comment"># 关闭自动提交偏移量（推荐手动提交）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费监听类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">KafkaListener</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">Acknowledgment</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Service</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaConsumerService</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 监听指定Topic，并发消费者线程数为3（根据分区数调整）</span></span>
<span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span></span>
<span class="line">        topics <span class="token operator">=</span> <span class="token string">&quot;your-topic-name&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        concurrency <span class="token operator">=</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        containerFactory <span class="token operator">=</span> <span class="token string">&quot;kafkaListenerContainerFactory&quot;</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Acknowledgment</span> ack<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 1. 处理消息逻辑</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received message: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 模拟业务处理（如数据库操作、计算等）</span></span>
<span class="line">            <span class="token function">processMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 2. 手动提交偏移量（确保消息处理成功后再提交）</span></span>
<span class="line">            ack<span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 3. 处理异常（如重试、记录日志等）</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费失败: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 可根据业务决定是否提交偏移量（如不提交则下次重试）</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 实际业务逻辑</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,118)]))}const r=s(l,[["render",c]]),u=JSON.parse('{"path":"/mq/kafka/","title":"Kafka","lang":"en-US","frontmatter":{"title":"Kafka","sidebar":"heading"},"git":{"updatedTime":1750240340000,"contributors":[{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":5,"url":"https://github.com/dongyz8"},{"name":"Fun_zil","username":"","email":"854257920@qq.com","commits":1}],"changelog":[{"hash":"ad8fc1a188d6829c38676e985c8e2097211af10d","time":1750240340000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"c418c7de7bdfacd1d7afeb22790bb7a55213e6d8","time":1744967425000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"7f927643cf84678c68bdb606a341073959279ad4","time":1734073104000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"f2efd749cd020fc09f8ea9a7391d89c6e5fbff06","time":1733384443000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"443a19563a051d2851a534d47501481962e0a281","time":1704524536000,"email":"854257920@qq.com","author":"Fun_zil","message":"commit"},{"hash":"70b37d4f176375118b0ae99f54befb1f90908112","time":1689762909000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"}]},"filePathRelative":"mq/kafka/README.md"}');export{r as comp,u as data};

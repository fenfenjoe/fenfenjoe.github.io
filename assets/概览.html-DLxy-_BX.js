import{_ as s,c as n,a as l,o as t}from"./app-Dz2xZzfz.js";const e={};function i(r,a){return t(),n("div",null,a[0]||(a[0]=[l(`<h1 id="概览" tabindex="-1"><a class="header-anchor" href="#概览"><span>概览</span></a></h1><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p>【大数据平台架构及主流技术栈 】<a href="https://blog.csdn.net/Tim_mwt/article/details/104347379" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/Tim_mwt/article/details/104347379</a></p><p>【到底什么是数据中台？】<a href="https://blog.csdn.net/cqcre/article/details/96935800" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/cqcre/article/details/96935800</a></p><p>【大数据中台技术架构】<a href="https://www.cnblogs.com/tellerfuliye/articles/13474480.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/tellerfuliye/articles/13474480.html</a></p><p>【数仓理论】<a href="https://blog.csdn.net/beiisbei/category_9939993.html" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/beiisbei/category_9939993.html</a></p><p>【马士兵大数据课程视频】</p><p>【5分钟学大数据】<a href="https://www.fivedata.cn/" target="_blank" rel="noopener noreferrer">https://www.fivedata.cn/</a></p><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq"><span>FAQ</span></a></h2><h3 id="什么时候需要用到大数据-大数据解决了什么需求" tabindex="-1"><a class="header-anchor" href="#什么时候需要用到大数据-大数据解决了什么需求"><span>什么时候需要用到大数据？大数据解决了什么需求？</span></a></h3><ol><li>企业数据分析的需求越来越多；</li><li>企业的业务系统过多，数据没有打通，分析时需要整合，低效且容易出错；</li><li>数据分析占用业务系统的服务器资源过多；</li></ol><h3 id="大数据有什么相关岗位-每个岗位的技术栈" tabindex="-1"><a class="header-anchor" href="#大数据有什么相关岗位-每个岗位的技术栈"><span>大数据有什么相关岗位？每个岗位的技术栈？</span></a></h3><ul><li>数仓开发（DW层相关）</li><li>数据挖掘开发（python、算法、机器学习等）</li><li>平台开发（可视化层、任务调度层、中间件）</li></ul><h3 id="数据分析有哪些方法论演变" tabindex="-1"><a class="header-anchor" href="#数据分析有哪些方法论演变"><span>数据分析有哪些方法论演变？</span></a></h3><ul><li>数据分析（传统）<br> 通过统计学方法，对历史数据进行排序、筛选、统计，从而得出一些有意义的结论。</li><li>OLAP<br> 基于数据仓库，从多个维度对数据进行统计分析，从而为决策提供支持。</li><li>数据挖掘<br> 从海量数据，通过关联分析、聚类分析、时序分析等各种算法，找出隐藏的规律</li></ul><h3 id="如果想从事数仓开发-需要怎么学习" tabindex="-1"><a class="header-anchor" href="#如果想从事数仓开发-需要怎么学习"><span>如果想从事数仓开发，需要怎么学习？</span></a></h3><ol start="0"><li>熟悉数仓的基本概念 <ul><li>面向主题</li><li>集成性（数据来自多个数据源）</li></ul></li><li>需要熟练使用ETL工具拉取数据。 <ul><li>关系型数据库(mysql,oracle)--&gt;HDFS<br> 对应工具为：sqoop</li><li>非关系型数据库(redis,mongo,es)--&gt;HDFS<br> 对应工具为：flume</li><li>日志文件--&gt;HDFS<br> 对应工具为：flume</li><li>全量数据（离线数据）同步：DataX、Sqoop、Flume</li><li>增量数据（实时数据）同步：Maxwell、Canal</li></ul></li></ol><blockquote><p>学习使用ETL可优先学这2个工具：</p><ul><li><strong>DataX</strong>。支持关系型数据库、非关系型数据库、大数据、文件系统等多种数据源</li><li><strong>Canal</strong>。</li></ul></blockquote><ol start="2"><li>需要学习scala语言</li></ol><h3 id="大数据有很多组件、平台-如sqoop、hive、spark、hadoop-这些都是什么" tabindex="-1"><a class="header-anchor" href="#大数据有很多组件、平台-如sqoop、hive、spark、hadoop-这些都是什么"><span>大数据有很多组件、平台（如sqoop、hive、spark、hadoop），这些都是什么？</span></a></h3><ul><li>数据仓库: 存储海量数据（TB、PB级别） <ul><li>hadoop:一个大数据分析平台软件，需要安装、搭建 <ul><li>hadoop1.0: <ul><li>组件：<br> HDFS----------分布式文件系统，hadoop安装后自带<br> MapReduce-----分布式计算系统，hadoop安装后自带（类似tomcat，上面可跑Java程序计算）</li></ul></li><li>hadoop2.0: <ul><li>组件：<br> HDFS----------分布式文件系统，hadoop安装后自带<br> HBase---------介于 NoSql 和 RDBMS 之间的数据库，依赖HDFS<br> Yarn----------分布式任务调度系统，hadoop安装后自带，上面可以跑不同的计算框架。 <ul><li>计算框架：<br> 第一代：MapReduce<br> 第二代（DAG）：Tez、Oozie<br> 第三代：Spark（批处理）、Spark Streaming（流处理） 第四代：Flink（批处理、流处理）</li></ul></li><li>工具：<br> Hive----------可以使用sql处理HDFS中的数据，支持多种计算框架（mapreduce、tez、spark）</li></ul></li></ul></li></ul></li><li>数据采集工具: <ul><li>sqoop: RDBMS &lt;--&gt; hadoop</li><li>flume: 日志文件 &lt;--&gt; hadoop</li></ul></li><li>kafka:消息队列系统，负责为应用之间数据迁移提供可靠的服务</li><li>可视化界面： <ul><li>Hue(Hadoop User Experience)：是面向大数据平台的‌开源Web界面工具‌，旨在通过图形化操作简化用户与Hadoop生态系统的交互</li></ul></li></ul><h3 id="常见场景及解决方案" tabindex="-1"><a class="header-anchor" href="#常见场景及解决方案"><span>常见场景及解决方案</span></a></h3><table><thead><tr><th>场景</th><th>解决方案</th><th>示例</th></tr></thead><tbody><tr><td>大数据实时查询</td><td>1.StarRocks </td><td></td></tr><tr><td>离线、增量ETL</td><td>1.DataX 2.Kafka 3.Hudi、Iceberg（适合数据湖）</td><td></td></tr><tr><td>离线数据分析</td><td>1.Hive 2.Spark 3.Presto（跨hive,mysql等数据源分析） 4.Clickhouse 5.Snowflake</td><td></td></tr><tr><td>实时数据分析</td><td>1.Hadoop+Kylin 2.Mysql+StarRocks</td><td></td></tr><tr><td>大数据KV存储</td><td>1.Cassandra 2.HBase</td><td></td></tr><tr><td>事件型数据聚合分析</td><td>1.Druid</td><td>用户点击事件 → Kafka → Druid实时摄入 → 大屏展示仪表盘数据</td></tr></tbody></table><h3 id="大数据系统的架构演变-演变的原因" tabindex="-1"><a class="header-anchor" href="#大数据系统的架构演变-演变的原因"><span>大数据系统的架构演变？演变的原因？</span></a></h3><h4 id="_1-传统离线架构" tabindex="-1"><a class="header-anchor" href="#_1-传统离线架构"><span>1.传统离线架构</span></a></h4><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid"><pre><code class="language-mermaid"><span class="line"><span class="token keyword">flowchart</span> LR</span>
<span class="line">  A<span class="token text string">[&quot;数据源（mysql、kafka）&quot;]</span></span>
<span class="line">  B<span class="token text string">[&quot;数据采集（sqoop）&quot;]</span></span>
<span class="line">  C<span class="token text string">[&quot;数据仓库（hive）&quot;]</span></span>
<span class="line">  D<span class="token text string">[&quot;数据计算（hiveSql）&quot;]</span></span>
<span class="line">  E<span class="token text string">[&quot;数据导出（sqoop）&quot;]</span></span>
<span class="line">  F<span class="token text string">[&quot;数据展示&quot;]</span></span>
<span class="line">  A <span class="token arrow operator">--&gt;</span> B <span class="token arrow operator">--&gt;</span> C <span class="token arrow operator">--&gt;</span> D <span class="token arrow operator">--&gt;</span> E <span class="token arrow operator">--&gt;</span> F</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>缺点：无法处理实时数据（流式数据）</p></blockquote><h4 id="_2-lambda架构-传统实时开发" tabindex="-1"><a class="header-anchor" href="#_2-lambda架构-传统实时开发"><span>2.lambda架构-传统实时开发</span></a></h4><p>在传统离线架构的基础上，增加一条<strong>实时数据的处理链路</strong>。</p><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid"><pre><code class="language-mermaid"><span class="line"><span class="token keyword">flowchart</span> LR</span>
<span class="line">  G<span class="token text string">[&quot;离线链路&quot;]</span></span>
<span class="line">  G1<span class="token text string">[&quot;实时链路&quot;]</span></span>
<span class="line">  A<span class="token text string">[&quot;数据源（mysql、kafka）&quot;]</span></span>
<span class="line">  B<span class="token text string">[&quot;数据采集（sqoop）&quot;]</span></span>
<span class="line">  C<span class="token text string">[&quot;数据仓库（hive）&quot;]</span></span>
<span class="line">  D<span class="token text string">[&quot;数据清洗、转换、聚合（hiveSql）&quot;]</span></span>
<span class="line">  E<span class="token text string">[&quot;数据导出（sqoop）&quot;]</span></span>
<span class="line">  F<span class="token text string">[&quot;数据展示&quot;]</span></span>
<span class="line">  A1<span class="token text string">[&quot;数据源（日志、爬虫数据）&quot;]</span></span>
<span class="line">  B1<span class="token text string">[&quot;数据采集（flume）&quot;]</span></span>
<span class="line">  C1<span class="token text string">[&quot;kafka&quot;]</span></span>
<span class="line">  D1<span class="token text string">[&quot;数据清洗、转换、聚合（flink）&quot;]</span></span>
<span class="line">  E1<span class="token text string">[&quot;数据导出&quot;]</span></span>
<span class="line">  F1<span class="token text string">[&quot;数据展示&quot;]</span></span>
<span class="line">  G <span class="token arrow operator">--&gt;</span> A <span class="token arrow operator">--&gt;</span> B <span class="token arrow operator">--&gt;</span> C <span class="token arrow operator">--&gt;</span> D <span class="token arrow operator">--&gt;</span> E <span class="token arrow operator">--&gt;</span> F</span>
<span class="line">  G1 <span class="token arrow operator">--&gt;</span> A1 <span class="token arrow operator">--&gt;</span> B1 <span class="token arrow operator">--&gt;</span> C1 <span class="token arrow operator">--&gt;</span> D1 <span class="token arrow operator">--&gt;</span> E1 <span class="token arrow operator">--&gt;</span> F1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>缺点：工作量大，重复工作多，因为实时数据没经过数仓，而是每次都需要重复编写数据清洗、校验、统一性的代码。</p></blockquote><h4 id="_3-lambda架构-离线数仓-实时数仓" tabindex="-1"><a class="header-anchor" href="#_3-lambda架构-离线数仓-实时数仓"><span>3.lambda架构（离线数仓+实时数仓）</span></a></h4><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid"><pre><code class="language-mermaid"><span class="line"><span class="token keyword">flowchart</span> LR</span>
<span class="line">  G<span class="token text string">[&quot;离线链路&quot;]</span></span>
<span class="line">  G1<span class="token text string">[&quot;实时链路&quot;]</span></span>
<span class="line">  A<span class="token text string">[&quot;数据源（mysql、kafka）&quot;]</span></span>
<span class="line">  B<span class="token text string">[&quot;数据采集（sqoop）&quot;]</span></span>
<span class="line">  C<span class="token text string">[&quot;数据仓库（hive）&quot;]</span></span>
<span class="line">  D<span class="token text string">[&quot;数据清洗、转换、聚合（hiveSql）&quot;]</span></span>
<span class="line">  E<span class="token text string">[&quot;数据导出（sqoop）&quot;]</span></span>
<span class="line">  F<span class="token text string">[&quot;数据展示&quot;]</span></span>
<span class="line">  A1<span class="token text string">[&quot;数据源（日志、爬虫数据）&quot;]</span></span>
<span class="line">  B1<span class="token text string">[&quot;数据采集（flume）&quot;]</span></span>
<span class="line">  C1<span class="token text string">[&quot;数据仓库（kafka）&quot;]</span></span>
<span class="line">  D1<span class="token text string">[&quot;数据清洗、转换、聚合（flink）&quot;]</span></span>
<span class="line">  E1<span class="token text string">[&quot;数据导出&quot;]</span></span>
<span class="line">  F1<span class="token text string">[&quot;数据展示&quot;]</span></span>
<span class="line">  G <span class="token arrow operator">--&gt;</span> A <span class="token arrow operator">--&gt;</span> B <span class="token arrow operator">--&gt;</span> C <span class="token arrow operator">--&gt;</span> D <span class="token arrow operator">--&gt;</span> E <span class="token arrow operator">--&gt;</span> F</span>
<span class="line">  G1 <span class="token arrow operator">--&gt;</span> A1 <span class="token arrow operator">--&gt;</span> B1 <span class="token arrow operator">--&gt;</span> C1 <span class="token arrow operator">--&gt;</span> D1 <span class="token arrow operator">--&gt;</span> E1 <span class="token arrow operator">--&gt;</span> F1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>缺点：同样的业务，却需要写两遍代码（离线&amp;实时），重复工作；集群资源使用变多；离线&amp;实时计算出的结果不一致；存储资源占用多</p></blockquote><h4 id="_4-kappa架构-纯实时数仓" tabindex="-1"><a class="header-anchor" href="#_4-kappa架构-纯实时数仓"><span>4.kappa架构（纯实时数仓）</span></a></h4><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid"><pre><code class="language-mermaid"><span class="line"><span class="token keyword">flowchart</span> LR</span>
<span class="line">  A<span class="token text string">[&quot;数据源（日志、爬虫数据）&quot;]</span></span>
<span class="line">  B<span class="token text string">[&quot;数据采集（flume）&quot;]</span></span>
<span class="line">  C<span class="token text string">[&quot;数据仓库（kafka）&quot;]</span></span>
<span class="line">  D<span class="token text string">[&quot;数据清洗、转换、聚合（flink）&quot;]</span></span>
<span class="line">  E<span class="token text string">[&quot;数据导出&quot;]</span></span>
<span class="line">  F<span class="token text string">[&quot;数据展示&quot;]</span></span>
<span class="line">  A <span class="token arrow operator">--&gt;</span> B <span class="token arrow operator">--&gt;</span> C <span class="token arrow operator">--&gt;</span> D <span class="token arrow operator">--&gt;</span> E <span class="token arrow operator">--&gt;</span> F</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>缺点：kafka数据会过期，无法支持海量数据；kafka不支持SQL；kafka不支持数据更新</p></blockquote><h4 id="_5-湖仓一体、批流一体-实时数仓" tabindex="-1"><a class="header-anchor" href="#_5-湖仓一体、批流一体-实时数仓"><span>5.湖仓一体、批流一体（实时数仓）</span></a></h4><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid"><pre><code class="language-mermaid"><span class="line"><span class="token keyword">flowchart</span> LR</span>
<span class="line">  A<span class="token text string">[&quot;数据源&quot;]</span></span>
<span class="line">  B<span class="token text string">[&quot;数据采集（sqoop）&quot;]</span></span>
<span class="line">  C<span class="token text string">[&quot;数据缓存（kafka）&quot;]</span></span>
<span class="line">  D<span class="token text string">[&quot;数据仓库（iceBerg）&quot;]</span></span>
<span class="line">  E<span class="token text string">[&quot;数据清洗、转换、聚合（flink）&quot;]</span></span>
<span class="line">  F<span class="token text string">[&quot;数据集市（MySQL、clickhouse、es...）&quot;]</span></span>
<span class="line">  G<span class="token text string">[&quot;数据展示&quot;]</span></span>
<span class="line">  A <span class="token arrow operator">--&gt;</span> B <span class="token arrow operator">--&gt;</span> C <span class="token arrow operator">--&gt;</span> D <span class="token arrow operator">--&gt;</span> E <span class="token arrow operator">--&gt;</span> F <span class="token arrow operator">--&gt;</span> G</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>flink既支持离线计算，也支持实时计算；底层是HDFS，支持海量存储；支持SQL；支持数据更新；</p></blockquote><h2 id="大数据系统架构" tabindex="-1"><a class="header-anchor" href="#大数据系统架构"><span>大数据系统架构</span></a></h2><p>主要分为以下几层：</p><ul><li>数据来源层</li><li>ODS层（原始数据层）</li><li>DW层（数据仓库层）</li><li>ADS层（数据应用层）</li></ul><p>数据就是由 数据来源层 -&gt; ODS层 -&gt; DW层 -&gt; ADS层这种顺序流动；<br> 生成在ADS层的数据，则是对用户决策比较有指导意义的数据；<br> 数据则一般通过ETL工具来分析、处理，最后由上层流动到下层；</p><blockquote><p><strong>有哪些常见的ETL工具？</strong></p><ul><li>第三方ETL系统（关系型数据，通过API接口）</li><li>Sqoop/apache（需要有Hadoop）、DataX/alibaba（python）、pentaho（前kettle）、Canel（关系型数据）</li><li>LogStash、Flume（非关系型数据，如日志文件）</li><li>kafka（缓存数据）</li></ul></blockquote><p>上面的是主体，还有其他辅助模块：</p><ul><li>OLAP层（presto、kylin、clickhouse等）</li><li>数据可视化层（TCV等）</li><li>任务调度层（oozie、azkaban、airflow等）</li><li>中间件层（redis、elk、zookeeper、kafka等）</li><li>数据挖掘（python、多元线性回归、贝叶斯算法等）</li></ul><blockquote><p><strong>为什么kafka在OLAP系统中很常用？</strong></p><ol><li>缓冲和削峰。当下游系统处理数据的速度跟不上上游系统发送数据的速度，kafka可以暂存数据，等待下游系统按自己的速度处理。</li><li>健壮性。当下游系统短暂宕机，kafka可以暂存数据，等重启后接着处理，不会影响业务。</li><li>异步。上游系统发出数据后，不必等待下游系统处理完数据，从而提高了效率。</li><li>可扩展性及容错。</li></ol></blockquote><h3 id="数据来源层" tabindex="-1"><a class="header-anchor" href="#数据来源层"><span>数据来源层</span></a></h3><ul><li>业务数据库 <ul><li>Mysql</li><li>Oracle</li><li>SqlServer</li></ul></li><li>埋点数据日志（用户行为日志）</li><li>非结构化存储（日志、图片、视频、文本文件等） <ul><li>OSS</li><li>FTP</li></ul></li><li>消息队列 <ul><li>kafka</li></ul></li><li>NoSQL <ul><li>OTS</li><li>MongoDB</li></ul></li><li>...</li></ul><h3 id="ods层-原始数据层" tabindex="-1"><a class="header-anchor" href="#ods层-原始数据层"><span>ODS层（原始数据层）</span></a></h3><ol><li>通过一些ETL工具，从数据来源层提取数据并保存；</li><li>存储最原始的数据；但有些也会做最基本的处理（去重、空判断等）</li></ol><h3 id="dw层-数据仓库层" tabindex="-1"><a class="header-anchor" href="#dw层-数据仓库层"><span>DW层（数据仓库层）</span></a></h3><blockquote><p><strong>为什么需要数据仓库？</strong><br> 比起业务数据库，在数仓中数据的分类和分层更清晰（多层次），数据更有效（进仓前经过过滤和清洗）<br> 查询企业的数据更加方便快捷。成熟的数仓会通过任务调度，定时从企业的各个系统同步增量数据。因此，所有的查询都可以直接从数据仓库获取，而不需要连接不同系统的数据库，还解决了跨库关联的问题。<br> 数据仓库可存储不同类型的数据（关系型数据、日志、文件等）</p></blockquote><p>数据仓库又可以细分为以下几层：</p><ul><li>DWD层（Data Warehouse Detail，数据明细层） <ol><li>负责进行数据清洗（去空、去脏数据、值域判断等）</li></ol></li><li>DWM层（Data Warehouse Middle，数据中间层） <ol><li>在底层数据的基础上，计算出一些指标</li><li>将维度表、事实表进行聚合，形成【宽表】（即字段很多的表）</li><li>也有可能没有该层，直接在DWS层完成该层的内容</li></ol></li><li>DWS层（数据服务层，算是集市层？） <ol><li>在底层数据的基础上，整合汇总成一个主题的数据服务层，生成【主题宽表】</li><li>DWS、DWM、DWD构成DW层，是数据仓库的主体，维度建模在此处应用较多。</li></ol></li><li>DWT层</li></ul><p>【DWD层】--ETL工具--&gt; 【DWM层】--ETL工具--&gt; 【DWS层】--ETL工具--&gt; 【DWT层】 --ETL工具--&gt; 数据应用层</p><p>比较流行的DW层自研解决方案：</p><p>【数据仓库（存储引擎）】</p><ul><li>hadoop HDFS(分布式文件系统)</li><li>HBase(分布式数据库)</li><li>Hudi(数据湖)</li><li>iceberg(数据湖)</li><li>AWS Redshift、Greenplum</li><li>Hive(数据仓库)</li><li>...</li></ul><p>【ETL工具】</p><ul><li>第三方ETL系统（支持关系型数据、非关系型数据，一般面向企业，付费）</li><li>Sqoop/apache、DataX/alibaba、pentaho（前kettle）、Canel（关系型数据采集、导出）</li><li>LogStash、Flume（非关系型数据采集，如日志文件）</li><li>flume、maxwell、canel、storm（实时数据采集）</li></ul><p>【计算引擎】</p><ul><li>离线计算： <ul><li>hadoop mapreduce</li><li>hiveSQL</li></ul></li><li>实时计算 <ul><li>sparkSQL</li><li>flink</li><li>storm</li></ul></li></ul><h3 id="ads层-application-data-service-数据应用层" tabindex="-1"><a class="header-anchor" href="#ads层-application-data-service-数据应用层"><span>ADS层（Application Data Service，数据应用层）</span></a></h3><ol><li><p>数据一般用于数据分析和挖掘，最后生成【数据报表】</p></li><li><p>用于生成【数据报表】。</p></li></ol><p>该层常用的计算引擎如下：</p><ul><li>Redis</li><li>ES</li><li>PostgreSql</li><li>hivesql</li><li>sparksql</li><li>apache kylin</li><li>starRocks</li><li>Presto</li><li>druid</li><li>impala</li><li>phoenix</li><li>doris</li><li>kudu（分布式列式存储引擎）</li><li>clickhouse（列式存储引擎）</li><li>...</li></ul><h2 id="inmon企业工厂架构" tabindex="-1"><a class="header-anchor" href="#inmon企业工厂架构"><span>Inmon企业工厂架构</span></a></h2><p>业务系统 --&gt; ODS层（数据过渡区） --&gt; 三范式企业级数据仓库 --&gt; 部门级数据集市 --&gt; ADS层（最终输出端）</p><blockquote><p>关键字：范式建模、数据集市</p></blockquote><h2 id="kimball数据仓库架构" tabindex="-1"><a class="header-anchor" href="#kimball数据仓库架构"><span>Kimball数据仓库架构</span></a></h2><p>业务系统 --&gt; ODS层（数据过渡区） --&gt; 多维企业级数据仓库 --&gt; ADS层（最终输出端）</p><blockquote><p>关键字：星型建模；事实表and维度表；</p></blockquote><h2 id="混合型数据仓库架构" tabindex="-1"><a class="header-anchor" href="#混合型数据仓库架构"><span>混合型数据仓库架构</span></a></h2><p>业务系统 --&gt; ODS层（数据过渡区） --&gt; 三范式企业级数据仓库 --&gt; 多维企业级数据仓库 --&gt; ADS层（最终输出端）</p><h2 id="olap系统" tabindex="-1"><a class="header-anchor" href="#olap系统"><span>OLAP系统</span></a></h2><p>OLAP(Online analytical processing)：联机分析处理，指代现在常见的大数据分析系统；另外其他的系统一般称为OLTP。</p><blockquote><p>OLTP(Online transaction processing)：在线/联机事务处理</p></blockquote><p><strong>OLAP的作用</strong></p><ul><li>基于数据仓库进行数据分析，生成报表，为企业决策、了解企业现状提供支持；</li><li>常见的OLAP系统种类：报表系统、用户画像系统、风控系统、推荐系统、机器学习</li></ul><p><strong>OLAP分类</strong><br> OLAP按存储器的数据存储格式分为ROLAP、MOLAP和HOLAP</p><blockquote><p>比较流行的OLAP层中间件： apache kylin<br> Presto<br> clickhouse</p></blockquote><h2 id="大数据发展历程" tabindex="-1"><a class="header-anchor" href="#大数据发展历程"><span>大数据发展历程</span></a></h2><ul><li>数据仓库时代（数据按业务划分主题域、数据与时间相关、不可修改）</li><li>Hadoop时代（解决了传统数据库无法承载海量数据的存储、计算的问题） <ul><li>解决方法：可分布式存储（HDFS）、可分布式计算（MapReduce）</li></ul></li><li>大数据平台时代（解决数据研发流程复杂、门槛高效率低的问题） <ul><li>解决方法：套用成熟的中间件</li></ul></li><li>数据中台时代（解决了数据重复加工的问题，提出数据共享、数据服务化）</li></ul><h2 id="数据建模" tabindex="-1"><a class="header-anchor" href="#数据建模"><span>数据建模</span></a></h2><p>在抽取数据之前，需要先定义好表的信息（字段、主键等）、表与表之间的关系，这就是我理解的数据建模。</p><h3 id="什么时候便需要进行建模" tabindex="-1"><a class="header-anchor" href="#什么时候便需要进行建模"><span>什么时候便需要进行建模？</span></a></h3><p>从需求分析的时候便开始进行逻辑建模（类图），在概要设计阶段完成，在详细设计阶段确定好物理模型（即具体的表结构、表与表的关联关系等）</p><h3 id="数据建模的方法论演变" tabindex="-1"><a class="header-anchor" href="#数据建模的方法论演变"><span>数据建模的方法论演变</span></a></h3><ul><li>关系建模（ER图，关系型数据库建模方法论）</li><li>范式建模（数据仓库之父比尔·恩门（Bill Inmon）提出，自上而下，数据仓库建模方法论）</li><li>维度建模（Ralph Kimball提出，自下而上，数据仓库建模方法论） <ul><li>组件 <ul><li>事实表： 不会存储信息，只有很多外键，信息都通过外键保存到关联的维度表中。 例如：用事实表来存储订单信息。订单的事实表会关联订单、客户、商家、商品等多个维度表，只会保存这些表的主键，不会存储冗余信息；</li><li>维度表： 只包含一个主键，没有外键，存储某个实体的详细信息。可以被多张事实表关联。</li></ul></li><li>拓扑 <ul><li>星型模型（方便OLAP分析）</li><li>雪花模型</li><li>星座模型</li></ul></li></ul></li><li>Cube（数据立方体）建模</li><li>宽表建模 <ul><li>将关联表合并为单一大表（如星型/雪花模型转宽表），减少Join开销</li></ul></li></ul><h3 id="建模工具" tabindex="-1"><a class="header-anchor" href="#建模工具"><span>建模工具</span></a></h3><ul><li>PowerDesign</li><li>ERWin</li><li>Datablau Data Modeler（阿里DataWorks相关）</li></ul><h2 id="数据计算" tabindex="-1"><a class="header-anchor" href="#数据计算"><span>数据计算</span></a></h2><h3 id="计算引擎一览" tabindex="-1"><a class="header-anchor" href="#计算引擎一览"><span>计算引擎一览</span></a></h3><table><thead><tr><th>名称</th><th>架构</th><th>存储方式</th><th>类型</th></tr></thead><tbody><tr><td>hadoop</td><td>mapreduce</td><td>ROLAP</td><td>批处理</td></tr><tr><td>hive</td><td>mapreduce</td><td>ROLAP</td><td>批处理</td></tr><tr><td>pig</td><td>mapreduce</td><td>ROLAP</td><td>批处理</td></tr><tr><td>Tez</td><td>mapreduce</td><td>ROLAP</td><td>批处理</td></tr><tr><td>Greenplum</td><td>MPP</td><td>ROLAP</td><td>批处理</td></tr><tr><td>Vertica</td><td>MPP</td><td>MOLAP</td><td>批处理</td></tr><tr><td>Snowflake</td><td>MPP</td><td>HOLAP</td><td>批处理</td></tr><tr><td>Presto</td><td>MPP</td><td>ROLAP</td><td>批处理</td></tr><tr><td>Impala</td><td>MPP</td><td>ROLAP</td><td>批处理</td></tr><tr><td>Spark</td><td>MPP</td><td>ROLAP</td><td>批处理</td></tr><tr><td>Spark Stream</td><td>MPP</td><td>ROLAP</td><td>流处理</td></tr><tr><td>Drill</td><td>MPP</td><td>ROLAP</td><td>批处理</td></tr><tr><td>Hawq</td><td>MPP</td><td>ROLAP</td><td>批处理</td></tr><tr><td>clickhouse</td><td>MPP</td><td>MOLAP</td><td>批处理</td></tr><tr><td>doris</td><td>MPP</td><td>MOLAP</td><td>批流一体</td></tr><tr><td>Druid</td><td>预计算</td><td>MOLAP</td><td>流处理</td></tr><tr><td>Kylin</td><td>预计算</td><td>MOLAP</td><td>批处理</td></tr><tr><td>ElasticSearch</td><td>lucene</td><td>ROLAP</td><td>批处理 &amp; 流处理（近实时搜索）</td></tr><tr><td>Solr</td><td>lucene</td><td>ROLAP</td><td>批处理 &amp; 流处理（近实时搜索）</td></tr><tr><td>StarRocks</td><td>MPP</td><td>ROLAP</td><td>批处理 &amp; 流处理</td></tr></tbody></table><h5 id="mapreduce-hadoop" tabindex="-1"><a class="header-anchor" href="#mapreduce-hadoop"><span>MapReduce（Hadoop）</span></a></h5><h5 id="sparksql-mapreduce的替代者" tabindex="-1"><a class="header-anchor" href="#sparksql-mapreduce的替代者"><span>SparkSQL：MapReduce的替代者</span></a></h5><h5 id="hivesql" tabindex="-1"><a class="header-anchor" href="#hivesql"><span>HiveSQL</span></a></h5><h5 id="pig" tabindex="-1"><a class="header-anchor" href="#pig"><span>Pig</span></a></h5><h5 id="cassandra" tabindex="-1"><a class="header-anchor" href="#cassandra"><span>Cassandra</span></a></h5><h5 id="presto" tabindex="-1"><a class="header-anchor" href="#presto"><span>Presto</span></a></h5><h5 id="elastic-mapreduce-emr" tabindex="-1"><a class="header-anchor" href="#elastic-mapreduce-emr"><span>Elastic MapReduce（EMR）</span></a></h5><h3 id="其他技术栈" tabindex="-1"><a class="header-anchor" href="#其他技术栈"><span>其他技术栈</span></a></h3><ul><li>Kubernetes（容器化、云化）</li><li>Apollo（分布式配置中心）</li><li>ESB（企业服务总线框架）</li><li>ELK技术栈（日志分析） <ul><li>ES（Elastic Search， Model：数据持久层）</li><li>Logstash（Controller：搜集和过滤数据）</li><li>Kibana（View：视图层。ES数据可视化平台）</li></ul></li><li>Hadoop</li><li>Activity（工作流框架）</li><li>Apache Griffin（数据质量）</li><li>Apache Kylin（数据仓库）</li></ul>`,105)]))}const p=s(e,[["render",i]]),d=JSON.parse('{"path":"/bigdata/%E6%A6%82%E8%A7%88.html","title":"大数据概览","lang":"en-US","frontmatter":{"title":"大数据概览"},"git":{"updatedTime":1749806079000,"contributors":[{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":4,"url":"https://github.com/dongyz8"}],"changelog":[{"hash":"80e0827d475a79fb45454cb067b28fc2e737faa6","time":1749806079000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"3d60d2498d5cd5d581413f4f8fe12bd55cf0924c","time":1747208542000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"7f927643cf84678c68bdb606a341073959279ad4","time":1734073104000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"f2efd749cd020fc09f8ea9a7391d89c6e5fbff06","time":1733384443000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"}]},"filePathRelative":"bigdata/概览.md"}');export{p as comp,d as data};

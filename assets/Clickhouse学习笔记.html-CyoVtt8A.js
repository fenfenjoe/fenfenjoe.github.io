import{_ as n,c as a,a as e,o as l}from"./app-iMoEB5u2.js";const i={};function p(t,s){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="clickhouse学习笔记" tabindex="-1"><a class="header-anchor" href="#clickhouse学习笔记"><span>Clickhouse学习笔记</span></a></h1><h2 id="概览" tabindex="-1"><a class="header-anchor" href="#概览"><span>概览</span></a></h2><ul><li>开发语言：C++语言</li><li>主要特性： <ul><li>列式存储</li><li>提供了实时数据更新和索引功能</li><li>支持类SQL查询</li><li>支持毫秒级查询返回数据</li><li>支持分布式部署</li><li>支持TB级别甚至PB级别数据量（数万亿行）</li><li>支持多表关联查询</li></ul></li><li>缺点 <ul><li>不适合频繁更新，更适合追加写入（insert）</li><li>不支持事务</li></ul></li></ul><h2 id="搭建" tabindex="-1"><a class="header-anchor" href="#搭建"><span>搭建</span></a></h2><p>单台机器安装完Clickhouse后，文件目录是这样的：</p><ul><li>/usr <ul><li>/bin（可执行文件目录） <ul><li>clickhouse-client（客户端工具）</li><li>clickhouse-server（服务端工具）</li></ul></li></ul></li><li>/etc <ul><li>/clickhouse-server（服务端的配置文件目录） <ul><li>/config.xml（主要的服务端配置文件）</li><li>/users.xml（用户权限配置文件）</li><li>/config.d/（额外的配置文件目录）</li></ul></li></ul></li><li>/var <ul><li>/log <ul><li>/clickhouse-server（默认的保存日志的目录） <ul><li>clickhouse-server.log</li><li>clickhouse-server.err.log</li></ul></li></ul></li><li>/lib <ul><li>/clickhouse（默认的数据目录） <ul><li>/data（存储实际的数据文件）</li><li>/metadata（存储数据库和表的元数据）</li><li>/user_files（用户数据目录）</li><li>/tmp（临时数据目录）</li></ul></li></ul></li></ul></li></ul><p>Clickhouse可以单机运行，但既然用到Clickhouse，我们就是看中了它支持大数据量、支持分布式部署的优点。</p><p>下面是集群部署的步骤。</p><ul><li>1.安装并配置Zookeeper</li><li>2.config.xml中配置ClickHouse集群参数</li><li>3.config.xml中配置Zookeeper参数</li><li>4.启动Clickhouse</li></ul><p>集群架构如下：</p><ul><li>集群 <ul><li>分片1 <ul><li>副本1（Clickhouse）</li><li>副本2（Clickhouse）</li></ul></li><li>分片2 <ul><li>副本3（Clickhouse）</li><li>副本4（Clickhouse）</li></ul></li></ul></li><li>注册中心（Zookeeper集群）</li></ul><h2 id="clickhouse客户端" tabindex="-1"><a class="header-anchor" href="#clickhouse客户端"><span>Clickhouse客户端</span></a></h2><p>推荐<strong>DBeaver</strong></p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><p>整数类型‌：<br> 有符号整数型：Int8、Int16、Int32、Int64，分别使用1、2、4、8个字节存储。 无符号整数型：UInt8、UInt16、UInt32、UInt64，分别使用1、2、4、8个字节存储。</p><p>‌浮点数类型‌：<br> Float32和Float64，分别使用4、8个字节存储。</p><p>‌定点数类型‌：<br> Decimal(P, S)，支持指定精度和小数位数。P代表精度，S代表小数位数。</p><p>‌日期和时间类型‌：<br> Date，使用4个字节存储，表示自1970年1月1日以来的天数。 DateTime，使用8个字节存储，精确到纳秒级。 Date32和DateTime64，提供了额外的精度选项。</p><p>‌字符串类型‌：<br> String，变长字符串类型，使用相对较少的内存来存储字符串。 FixedString(N)，定长字符串类型，占用N个字节存储。</p><p>‌枚举类型‌：<br> Enum8和Enum16，分别使用1、2个字节存储，可以表示8、16种不同的值。</p><p>‌布尔类型‌：<br> 没有专门的布尔类型，但可以使用UInt8类型，取值限制为0或1。</p><p>UUID类型‌：<br> 使用16个字节存储，通过全局唯一标识符算法生成。</p><p>IP地址类型‌：<br> IPv4和IPv6，用于存储和操作IP地址数据。</p><p>‌数组类型‌：<br> Array(T)，可以存储任意类型T的数组。但请注意，在MergeTree表引擎中是不允许出现数组嵌套的。</p><p>‌可为空类型‌：<br> Nullable(T)，可以为任意类型T添加空值。</p><p>‌元组类型‌：<br> Tuple，用于存储和操作具有不同数据类型的数据集合。</p><h2 id="建数据库、建表" tabindex="-1"><a class="header-anchor" href="#建数据库、建表"><span>建数据库、建表</span></a></h2><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql"><pre><code class="language-mysql"><span class="line">-- 创建数据库</span>
<span class="line">CREATE DATABASE my_database;</span>
<span class="line"></span>
<span class="line">-- 切换数据库</span>
<span class="line">USE my_database;</span>
<span class="line"></span>
<span class="line">-- 创建表，并指定表引擎为MergeTree，orderby语句也是必须的</span>
<span class="line">CREATE TABLE users (</span>
<span class="line">    id Int64 PRIMARY KEY,</span>
<span class="line">    name String,</span>
<span class="line">    email String</span>
<span class="line">) ENGINE = MergeTree() ORDER BY id;</span>
<span class="line"></span>
<span class="line">-- 创建表，引擎为Distributed（分表的逻辑表）</span>
<span class="line">-- cluster是在配置文件定义的集群名称；</span>
<span class="line">-- database、table是数据库名和表名；</span>
<span class="line">-- sharding_key是分片键名称</span>
<span class="line">CREATE TABLE my_distributed_table AS my_local_table</span>
<span class="line">ENGINE = Distributed(cluster, database, table, sharding_key);</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">--创建表，引擎为LOG。LOG、MEMORY 不需orderby语句</span>
<span class="line">CREATE TABLE my_log_table</span>
<span class="line">(</span>
<span class="line">    event_time DateTime,</span>
<span class="line">    event_type String,</span>
<span class="line">    event_description String</span>
<span class="line">)</span>
<span class="line">ENGINE = Log;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>关于<strong>表引擎</strong></p><ul><li>MergeTree系列 <ul><li>MergeTree：最常用，支持索引和数据分区</li><li>ReplacingMergeTree：用于处理包含相同主键的重复数据，在合并分区时删除重复的数据。但请注意，它不能完全保证数据不重复</li><li>SummingMergeTree</li><li>AggregatingMergeTree</li><li>CollapsingMergeTree</li></ul></li><li>Log系列 <ul><li>Log：用于存储日志和其他机器数据，不支持索引和数据分区</li><li>TinyLog</li><li>StripeLog</li></ul></li><li>Memory系列‌：缓存数据，所有数据存储在RAM中，读写速度快，但重启数据会丢失</li><li>Distributed：不直接存储数据，而是作为一个中间层。对Distributed的查询会被转换成对不同节点上分表（通常是MergeTree表）的查询</li><li>Kafka：与Kafka集成，可用于实时数据流处理，适用于实时数据处理场景</li><li>MaterializedView：用于预处理数据，可以提高查询性能</li><li>File和URL：用于对文件进行操作，如CSV、Parquet等</li><li>其他</li></ul></blockquote><h2 id="增删改查" tabindex="-1"><a class="header-anchor" href="#增删改查"><span>增删改查</span></a></h2><p>增：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token comment">-- 直接插入值</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> my_distributed_table <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>value3<span class="token punctuation">,</span> value4<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 取其他表数据进行插入</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> my_distributed_table</span>
<span class="line"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token keyword">FROM</span> another_table<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token comment">-- 多表关联查询</span></span>
<span class="line"><span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>u<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span>o<span class="token punctuation">.</span>order_id<span class="token punctuation">,</span>o<span class="token punctuation">.</span>order_date<span class="token punctuation">,</span>o<span class="token punctuation">.</span>amount</span>
<span class="line"><span class="token keyword">FROM</span> users u <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> orders o <span class="token keyword">ON</span> u<span class="token punctuation">.</span>user_id <span class="token operator">=</span> o<span class="token punctuation">.</span>user_id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删和改：<br> 注意，Clickhouse是一个以插入为主的分布式数据库，因此删除和修改数据的效率会比较差，而且它们是后台的异步操作。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token comment">-- 修改（方法1）</span></span>
<span class="line"><span class="token keyword">UPDATE</span> table_name <span class="token keyword">SET</span> column1 <span class="token operator">=</span> value1 <span class="token keyword">WHERE</span> column2 <span class="token operator">=</span> value2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 修改（方法2）</span></span>
<span class="line"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">UPDATE</span> column1 <span class="token operator">=</span> value1 <span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 删除</span></span>
<span class="line"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">DELETE</span> <span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springboot项目中集成clickhouse" tabindex="-1"><a class="header-anchor" href="#springboot项目中集成clickhouse"><span>springboot项目中集成clickhouse</span></a></h2><ol><li>添加依赖</li></ol><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ru.yandex.clickhouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>clickhouse-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>添加配置</li></ol><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties"><pre><code class="language-properties"><span class="line"><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:clickhouse://localhost:8123/default</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">your_username</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">your_password</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">ru.yandex.clickhouse.ClickHouseDriver</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>创建实体类，并使用JdbcTemplate或CrudRepository进行数据操作。<br> 略。</li></ol>`,42)]))}const o=n(i,[["render",p]]),u=JSON.parse('{"path":"/bigdata/Clickhouse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html","title":"Clickhouse学习笔记","lang":"en-US","frontmatter":{"title":"Clickhouse学习笔记","sidebar":"heading"},"git":{"updatedTime":1750240340000,"contributors":[{"name":"dongyz8","username":"dongyz8","email":"dongyz8@gdii-yueyun.com","commits":3,"url":"https://github.com/dongyz8"}],"changelog":[{"hash":"ad8fc1a188d6829c38676e985c8e2097211af10d","time":1750240340000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"80e0827d475a79fb45454cb067b28fc2e737faa6","time":1749806079000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"},{"hash":"c97979e28496bfd6a49b98c58b764b3950f0de75","time":1739849131000,"email":"dongyz8@gdii-yueyun.com","author":"dongyz8","message":"commit"}]},"filePathRelative":"bigdata/Clickhouse学习笔记.md"}');export{o as comp,u as data};
